var documenterSearchIndex = {"docs":
[{"location":"APIs/Bucket/#Bucket","page":"Bucket Model","title":"Bucket","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"CurrentModule = ClimaLSM.Bucket","category":"page"},{"location":"APIs/Bucket/#Types","page":"Bucket Model","title":"Types","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.BucketModelParameters\nClimaLSM.Bucket.PrescribedAtmosphere\nClimaLSM.Bucket.PrescribedRadiativeFluxes\nClimaLSM.Bucket.AbstractAtmosphericDrivers\nClimaLSM.Bucket.AbstractRadiativeDrivers\nClimaLSM.Bucket.BulkAlbedoMap\nClimaLSM.Bucket.BulkAlbedoFunction\nClimaLSM.Bucket.BucketModel","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BucketModelParameters","page":"Bucket Model","title":"ClimaLSM.Bucket.BucketModelParameters","text":"struct BucketModelParameters{\n    FT <: AbstractFloat,\n    PSE,\n}\n\nContainer for holding the parameters of the bucket model.\n\nκ_soil: Conductivity of the soil (W/K/m); constant\nρc_soil: Volumetric heat capacity of the soil (J/m^3/K); constant\nalbedo: Albedo Model\nσS_c: Critical σSWE amount (m) where surface transitions from to snow-covered\nW_f: Capacity of the land bucket (m)\nz_0m: Roughness length for momentum (m)\nz_0b: Roughness length for scalars (m)\nτc: τc timescale on which snow melts\nearth_param_set: Earth Parameter set; physical constants, etc\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.PrescribedAtmosphere","page":"Bucket Model","title":"ClimaLSM.Bucket.PrescribedAtmosphere","text":"PrescribedAtmosphere{FT, LP, SP, TA, UA, QA, RA} <: AbstractAtmosphericDrivers{FT}\n\nContainer for holding prescribed atmospheric drivers and other information needed for computing turbulent surface fluxes when driving the bucket model in standalone mode.\n\nliquid_precip: Precipitation (m/s) function of time: positive by definition\nsnow_precip: Snow precipitation (m/s) function of time: positive by definition\nT_atmos: Prescribed atmospheric temperature (function of time)  at the reference height (K)\nu_atmos: Prescribed wind speed (function of time)  at the reference height (m/s)\nq_atmos: Prescribed specific humidity (function of time)  at the reference height (_)\nρ_atmos: Prescribed air density (function of time)  at the reference height (kg/m^3)\nh_atmos: Reference height, relative to surface elevation(m)\nρ_sfc: Surface air density (kg/m^3). Note that convergence errors result if ρsfc = ρatmos.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.PrescribedRadiativeFluxes","page":"Bucket Model","title":"ClimaLSM.Bucket.PrescribedRadiativeFluxes","text":"PrescribedRadiativeFluxes{FT, SW, LW} <: AbstractRadiativeDrivers{FT}\n\nContainer for the prescribed radiation functions needed to drive the bucket model in standalone mode.\n\nSW_d: Downward shortwave radiation function of time (W/m^2): positive indicates towards surface\nLW_d: Downward longwave radiation function of time (W/m^2): positive indicates towards surface\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.AbstractAtmosphericDrivers","page":"Bucket Model","title":"ClimaLSM.Bucket.AbstractAtmosphericDrivers","text":" AbstractAtmosphericDrivers{FT <: AbstractFloat}\n\nAn abstract type of atmospheric drivers of the bucket model.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.AbstractRadiativeDrivers","page":"Bucket Model","title":"ClimaLSM.Bucket.AbstractRadiativeDrivers","text":" AbstractRadiativeDrivers{FT <: AbstractFloat}\n\nAn abstract type of radiative drivers of the bucket model.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BulkAlbedoMap","page":"Bucket Model","title":"ClimaLSM.Bucket.BulkAlbedoMap","text":"BulkAlbedoMap{FT} <: AbstractLandAlbedoModel\n\nAn albedo model where the albedo of different surface types is specified. Snow albedo is treated as constant across snow location and across wavelength. Surface albedo is specified via a NetCDF file, which can be a function of time, but is treated as constant across wavelengths; surface is this context refers  to soil and vegetation.\n\nNote that this option should only be used with global simulations, i.e. with a ClimaLSM.LSMSphericalShellDomain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BulkAlbedoFunction","page":"Bucket Model","title":"ClimaLSM.Bucket.BulkAlbedoFunction","text":"BulkAlbedoFunction{FT} <: AbstractLandAlbedoModel\n\nAn albedo model where the albedo of different surface types is specified. Snow albedo is treated as constant across snow location and across wavelength. Surface albedo (sfc)  is specified as a function of latitude and longitude, but is also treated as constant across wavelength; surface is this context refers to soil and vegetation.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BucketModel","page":"Bucket Model","title":"ClimaLSM.Bucket.BucketModel","text":"struct BucketModel{\n     FT,\n     PS <: BucketModelParameters{FT},\n     ATM <: AbstractAtmosphericDrivers{FT},\n     RAD <: AbstractRadiativeDrivers{FT},\n     D,\n } <: AbstractBucketModel{FT}\n\nConcrete type for the BucketModel, which store the model domain and parameters, as well as the necessary atmosphere and radiation fields for driving the model.\n\nparameters: Parameters required by the bucket model\natmos: The atmospheric drivers: Prescribed or Coupled\nradiation: The radiation drivers: Prescribed or Coupled\ndomain: The domain of the model\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#Extendible-Methods","page":"Bucket Model","title":"Extendible Methods","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.surface_fluxes\nClimaLSM.Bucket.net_radiation\nClimaLSM.Bucket.surface_air_density\nClimaLSM.Bucket.liquid_precipitation\nClimaLSM.Bucket.snow_precipitation\nClimaLSM.Bucket.surface_albedo\nClimaLSM.Bucket.partition_surface_fluxes","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.surface_fluxes","page":"Bucket Model","title":"ClimaLSM.Bucket.surface_fluxes","text":"surface_fluxes(Y,p,\n                t::FT,\n                parameters::P,\n                atmos::PA,\n                ) where {FT <: AbstractFloat, P <: BucketModelParameters{FT},  PA <: PrescribedAtmosphere{FT}}\n\nComputes the turbulent surface flux terms at the ground for a standalone simulation: turbulent energy fluxes as well as the water vapor flux (in units of m^3/m^2/s of water). Positive fluxes indicate flow from the ground to the atmosphere.\n\nIt solves for these given atmospheric conditions, stored in atmos, model parameters, and the surface temperature and surface specific humidity.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.net_radiation","page":"Bucket Model","title":"ClimaLSM.Bucket.net_radiation","text":"net_radiation(\n    Y,\n    p,\n    t::FT,\n    parameters::P,\n    radiation::PR,\n    ) where {FT <: AbstractFloat, P <: BucketModelParameters{FT},  PA <: PrescribedAtmosphere{FT}}\n\nComputes the net radiation at the ground for a standalone simulation. Positive fluxes indicate flow from the ground to the atmosphere.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.surface_air_density","page":"Bucket Model","title":"ClimaLSM.Bucket.surface_air_density","text":"surface_air_density(p, atmos::PrescribedAtmosphere)\n\nReturns the air density (kg/m^3) at the surface.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.liquid_precipitation","page":"Bucket Model","title":"ClimaLSM.Bucket.liquid_precipitation","text":"liquid_precipitation(p, atmos::PrescribedAtmosphere, t)\n\nReturns the liquid precipitation (m/s) at the surface.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.snow_precipitation","page":"Bucket Model","title":"ClimaLSM.Bucket.snow_precipitation","text":"snow_precipitation(p, atmos::PrescribedAtmosphere, t)\n\nReturns the precipitation in snow (m of liquid water/s) at the surface.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.surface_albedo","page":"Bucket Model","title":"ClimaLSM.Bucket.surface_albedo","text":"surface_albedo(α_sfc::FT, α_snow::FT, σS::FT, σS_c::FT)::FT where {FT <: AbstractFloat}\n\nReturns the bulk surface albedo, linearly interpolating between the albedo of snow and of the surface, based on the snow water equivalent S relative to the parameter S_c.\n\nThe linear interpolation is taken from Lague et al 2019.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.partition_surface_fluxes","page":"Bucket Model","title":"ClimaLSM.Bucket.partition_surface_fluxes","text":"partition_surface_fluxes(\n    σS::FT,\n    T_sfc::FT,\n    τ::FT,\n    snow_cover_fraction::FT,\n    E::FT,\n    F_sfc::FT,\n    _LH_f0::FT,\n    _T_freeze::FT,\n) where{FT}\n\nPartitions the surface fluxes in a flux for melting snow, a flux for sublimating snow, and a ground heat flux. \n\nAll fluxes are positive if they are in the direction from land towards the atmosphere.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#Methods-for-handling-parameters-read-in-from-NetCDF-files","page":"Bucket Model","title":"Methods for handling parameters read in from NetCDF files","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.set_initial_parameter_field!\nClimaLSM.Bucket.update_soil_albedo","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.set_initial_parameter_field!","page":"Bucket Model","title":"ClimaLSM.Bucket.set_initial_parameter_field!","text":"function set_initial_parameter_field!(\n    albedo::BulkAlbedoFunction{FT},\n    p,\n    surface_coords,\n) where {FT}\n\nUpdates the spatially-varying but constant in time surface  albedo stored in the auxiliary vector p in place,  according to the passed function of latitute and longitude stored in albedo.α_sfc.\n\n\n\n\n\nfunction set_initial_parameter_field!(\n    albedo::BulkAlbedoMap{FT},\n    p,\n    surface_coords,\n) where {FT}\n\nUpdates spatially-varying surface albedo stored in the auxiliary vector p in place, according to a NetCDF file. This data file is encapsulated in an object of type ClimaLSM.Regridder.MapInfo in the field albedo.α_sfc.\n\nThe NetCDF file is read in, regridded, and projected onto  the surface space of the LSM using ClimaCoreTempestRemap. The result is a ClimaCore.Fields.Field of albedo values.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#Artifact-Path-Functions","page":"Bucket Model","title":"Artifact Path Functions","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.cesm2_land_albedo_dataset_path","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.cesm2_land_albedo_dataset_path","page":"Bucket Model","title":"ClimaLSM.Bucket.cesm2_land_albedo_dataset_path","text":"cesm2_land_albedo_dataset_path()\n\nTriggers the download of the CESM2 land albedo dataset, if not already downloaded, using Julia Artifacts, and returns the path to  this file.\n\n\n\n\n\n","category":"function"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Setting-up-a-Coupled-Simulation","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"For more information about the bucket model, please see the bucket model tutorial.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"This tutorial shows how to set up a simulation for a coupled simulation. More detail for coupled runs can be found in the ClimaCoupler.jl documentation. In preparation for understanding this tutorial, we recommend also reading the intro to multi-component models tutorial as well as being familiar with multiple dispatch programming in Julia.","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Background","page":"Setting up a Coupled Simulation","title":"Background","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Recall that in order to drive the system in standalone mode, the user must provide prescribed functions of time for the water volume flux in precipitation,  for the net downward shortwave and longwave radiative energy fluxes, for the atmospheric temperature T_a, wind speed u_a (m/s), specific humidity q_a, and air density ρ_a (kg/m^3) at a reference height h_a (m), as well as for the air density ρ_sfc (kg/m^3) at the surface of the earth.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Turbulent surface fluxes are computed by the bucket model at each step of the simulation, using the land surface properties as well as the prescribed atmospheric properties, according to Monin-Obukhov theory. These fluxes, as well as the net radiation, are stored in the auxiliary state of the bucket model: p.bucket.turbulent_energy_flux, p.bucket.evaporation, p.bucket.R_n, where they are accessible when boundary conditions are required in the ODE functions (right hand side) of the prognostic equations.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In a coupled simulation, this changes. As we will see, the coupler computes turbulent surface fluxes based on information (prognostic state, parameters) passed to it by both the atmosphere and land models. Net radiation is computed within the atmosphere model, using the prognostic land surface temperature and the land surface albedo, and passed back to the land model via the coupler. Similarily, precipitation is computed within the atmosphere model, and passed back to the land model via the coupler. These details are important, but from the point of view of the land model, we only need to know that the coupler accesses land model variables to compute fluxes, and that the coupler passes these fluxes back to the land model.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In our current setup, \"passed back to the land model via the coupler\" means that the coupler accesses the auxiliary state of the land model and modifies it, at each step in the simulation, so that it holds the current net radiation, precipitation, and turbulent surface fluxes (p.bucket.turbulent_energy_flux, p.bucket.evaporation, p.bucket.R_n, p.bucket.P_liq, p.bucket.P_snow). These quantities are then still available in the ODE functions of the prognostic equations for the bucket model, as in the standalone case.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In order for the land model to be able to run both in standalone mode, and a coupled mode, within a single interface, we make use of multiple dispatch.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"To begin, let's import some necessary abstract and concrete types, as well as methods.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"using ClimaLSM\nusing ClimaLSM.Bucket:\n    BucketModel,\n    BucketModelParameters,\n    AbstractAtmosphericDrivers,\n    AbstractRadiativeDrivers\n\nimport ClimaLSM.Bucket:\n    surface_fluxes,\n    surface_air_density,\n    liquid_precipitation,\n    snow_precipitation\n\nFT = Float64;","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Turbulent-Surface-Fluxes-and-Radiation","page":"Setting up a Coupled Simulation","title":"Turbulent Surface Fluxes and Radiation","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Let's review how turbulent surface fluxes and radiation are computed by the land model. The user first creates the prescribed atmosphere and prescribed radiation drivers. In pseudo code, this might look something like:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"prescribed_atmos = PrescribedAtmosphere{FT}(*driver functions passed in here*) prescribed_radiation = PrescribedRadiativeFluxes{FT}(*driver functions passed in here*)","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"These are stored in the BucketModel object, along with BucketParameters. In order to compute turbulent surface fluxes, we call surface_fluxes, with arguments including prescribed_atmosphere. Since this argument is of the type PrescribedAtmosphere, the method of surface_fluxes which is executed is one which computes the turbulent surface fluxes using MOST. We have a similar function for net_radiation and which computes the net radiation based on the prescribed downwelling radiative fluxes, stored in an argument prescribed_radiation, which is of type PrescribedRadiation.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In the coupled case, we want different behavior. Inside coupler source code, we define new coupled types to use instead of the \"prescribed\" types:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"struct CoupledAtmosphere{FT} <: AbstractAtmosphericDrivers{FT} end\nstruct CoupledRadiativeFluxes{FT} <: AbstractRadiativeDrivers{FT} end","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Then, we define a new method for surface_fluxes and net_radiation which dispatch for these types:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"function ClimaLSM.Bucket.surface_fluxes(\n    Y,\n    p,\n    t,\n    parameters,\n    atmos::CoupledAtmosphere{FT},\n) where {FT <: AbstractFloat}\n    return (\n        turbulent_energy_flux = p.bucket.turbulent_energy_flux,\n        evaporation = p.bucket.evaporation,\n    )\nend\n\n\nfunction ClimaLSM.Bucket.net_radiation(\n    Y,\n    p,\n    t,\n    parameters,\n    radiation::CoupledRadiativeFluxes{FT},\n) where {FT <: AbstractFloat}\n    return p.bucket.R_n\nend","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Essentially, these methods simply returns the values stored in the auxiliary state p. Importantly, these functions are called by the bucket model each time step after the coupler has already computed these values (or extracted them from another model) and modifed p!","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Precipitation-and-surface-air-density","page":"Setting up a Coupled Simulation","title":"Precipitation and surface air density","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Within the right hand side/ODE function calls for the bucket model, we need both the liquid/snow precipitation and the surface air density (for computing specific humidity at the surface). In standalone runs, we call the functions surface_air_density,  liquid_precipitation, and snow_precipitation. When the atmos type is PrescribedAtmosphere, these return the prescribed values for these quantities.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In the coupled case, we need to extend these functions with a CoupledAtmosphere method:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"function ClimaLSM.Bucket.surface_air_density(p, atmos::CoupledAtmosphere)\n    return p.bucket.ρ_sfc\nend\n\nfunction ClimaLSM.Bucket.liquid_precipitation(p, atmos::CoupledAtmosphere, t)\n    return p.bucket.P_liq\nend\n\nfunction ClimaLSM.Bucket.snow_precipitation(p, atmos::CoupledAtmosphere, t)\n    return p.bucket.P_snow\nend","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Again, these functions are called in the ODE function of the bucket model after the coupler has updated the values of p with the correct values at that timestep.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Two other notes: (1) the coupler code actually extends the auxiliary state p of the bucket model, adding in the fields P_liq, P_snow, and ρ_sfc. These fields do not exist in p if the standalone bucket model, and (2) the surface air density is computed assuming an ideal gas and hydrostatic balance and by extrapolating from the air density at the lowest level of the atmosphere, which is why it is handled by the coupler.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Soil/freezing_front/#Modeling-a-freezing-front-in-unsaturated-soil","page":"Phase Changes","title":"Modeling a freezing front in unsaturated soil","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Before reading this tutorial, we recommend that you look over the coupled energy and water tutorial. That tutorial showed how to solve the heat equation for soil volumetric internal energy ρe_int, simultaneously with Richards equation for volumetric liquid water fraction ϑ_l, assuming zero volumetric ice fraction θ_i for all time, everywhere in the domain. In this example, we add in a source term to the right hand side for both θ_i and ϑ_l which models freezing and thawing and conserves water mass during the process. The equations are","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"frac ρe_int t =    κ(θ_l θ_i ν ) T +   ρe_int_liq K (Tθ_l θ_i ν ) nabla h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"frac  ϑ_l t =   K (Tθ_l θ_i ν ) h( ϑ_l z ν ) -fracF_Tρ_l","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"frac  θ_i t = fracF_Tρ_i","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Here","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"t is the time (s),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"z is the location in the vertical (m),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ρe_int is the volumetric internal energy of the soil (J/m^3),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"T is the temperature of the soil (K),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"κ is the thermal conductivity (W/m/K),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ρe_int_liq is the volumetric internal energy of liquid water (J/m^3),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"K is the hydraulic conductivity (m/s),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"h is the hydraulic head (m),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ϑ_l is the augmented volumetric liquid water fraction,","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"θ_i is the volumetric ice fraction,","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ν  denotes parameters relating to soil type, such as porosity, and","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"F_T is the freeze-thaw term.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"To begin, we will show how to implement adding in this source term. After the results are obtained, we will explain how our model parameterizes this effect and compare the results with some analytic expections.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"We solve these equations in an effectively 1-d domain with z  -020, and with the following boundary and initial conditions:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"- κ T(t z = 0) = 28 Wm^2K (T - 26715K) ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"- κ T(t z= -02) =  0 ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"T(t = 0 z) = 27985 K","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"- K h(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"-K h(t z = -02) = 0 ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ϑ_l(t = 0 z) = 033.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"The problem setup and soil properties are chosen to match the lab experiment of Mizoguchi (1990), as detailed in Hansson (2004) and Dall'Amico (2011).","category":"page"},{"location":"generated/Soil/freezing_front/#Import-necessary-modules","page":"Phase Changes","title":"Import necessary modules","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"using OrdinaryDiffEq: ODEProblem, solve, RK4\nusing ArtifactWrappers\nusing DelimitedFiles\nusing Plots\n\nusing ClimaCore\nimport CLIMAParameters as CP\n\nif !(\".\" in LOAD_PATH)\n    push!(LOAD_PATH, \".\")\nend\nusing ClimaLSM\nusing ClimaLSM.Domains: Column\nusing ClimaLSM.Soil\n\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Soil/freezing_front/#Preliminary-set-up","page":"Phase Changes","title":"Preliminary set-up","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Choose a floating point precision, and get the parameter set, which holds constants used across CliMA models:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"FT = Float64\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Set the values of other parameters required by the model:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ν = FT(0.535)\nK_sat = FT(3.2e-6) # m/s\nS_s = FT(1e-3) #inverse meters\nvg_n = FT(1.48)\nvg_α = FT(1.11) # inverse meters\nvg_m = FT(1) - FT(1) / vg_n\nθ_r = FT(0.05)\nν_ss_om = FT(0.3)\nν_ss_quartz = FT(0.7)\nν_ss_gravel = FT(0.0)\nκ_minerals = FT(2.4)\nκ_om = FT(0.25)\nκ_quartz = FT(7.7)\nκ_air = FT(0.025)\nκ_ice = FT(2.29)\nκ_liq = FT(0.57)\nρp = FT(3200)\nρc_ds = FT(2.3e6 * (1.0 - ν))\nκ_solid = Soil.κ_solid(ν_ss_om, ν_ss_quartz, κ_om, κ_quartz, κ_minerals)\nκ_dry = Soil.κ_dry(ρp, ν, κ_solid, κ_air)\nκ_sat_frozen = Soil.κ_sat_frozen(κ_solid, ν, κ_ice)\nκ_sat_unfrozen = Soil.κ_sat_unfrozen(κ_solid, ν, κ_liq)\nparams = Soil.EnergyHydrologyParameters(;\n    κ_dry = κ_dry,\n    κ_sat_frozen = κ_sat_frozen,\n    κ_sat_unfrozen = κ_sat_unfrozen,\n    ρc_ds = ρc_ds,\n    ν = ν,\n    ν_ss_om = ν_ss_om,\n    ν_ss_quartz = ν_ss_quartz,\n    ν_ss_gravel = ν_ss_gravel,\n    vg_α = vg_α,\n    vg_n = vg_n,\n    K_sat = K_sat,\n    S_s = S_s,\n    θ_r = θ_r,\n    earth_param_set = earth_param_set,\n);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Choose the domain and discretization:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"zmax = FT(0)\nzmin = FT(-0.2)\nnelems = 20\nΔz = 0.01\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Set the boundary conditions:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"zero_flux_bc = FluxBC((p, t) -> eltype(t)(0.0))\nfunction top_heat_flux(p, t)\n    p_len = ClimaCore.Spaces.nlevels(axes(p.soil.T))\n    T_c = ClimaCore.Fields.level(p.soil.T, p_len)\n    return @. eltype(t)(28 * (T_c - 267.15))\nend\ntop_heat_flux_bc = FluxBC(top_heat_flux)\nboundary_fluxes = (;\n    water = (top = zero_flux_bc, bottom = zero_flux_bc),\n    heat = (top = top_heat_flux_bc, bottom = zero_flux_bc),\n);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Create the source term instance. Our phase change model requires knowledge of the vertical spacing, so we pass that information in via an attribute of the PhaseChange structure. Sources are added as elements of a list of sources. Here we just add freezing and thawing.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"sources = (PhaseChange{FT}(Δz),);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Now we can package this up in the EnergyHydrology model struct:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"soil = Soil.EnergyHydrology{FT}(;\n    parameters = params,\n    domain = soil_domain,\n    boundary_conditions = boundary_fluxes,\n    sources = sources,\n);","category":"page"},{"location":"generated/Soil/freezing_front/#Running-a-simulation","page":"Phase Changes","title":"Running a simulation","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Once we have the model, we can initialize the state vectors and obtain the coordinates","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Y, p, coords = initialize(soil);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"After which, we can specify the initial condition function, and initialze the variables:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"function init_soil!(Ysoil, z, params)\n    ν = params.ν\n    FT = eltype(Y.soil.ϑ_l)\n    Ysoil.soil.ϑ_l .= FT(0.33)\n    Ysoil.soil.θ_i .= FT(0.0)\n    T = FT(279.85)\n    ρc_s = Soil.volumetric_heat_capacity(FT(0.33), FT(0.0), params)\n    Ysoil.soil.ρe_int .=\n        Soil.volumetric_internal_energy.(FT(0.0), ρc_s, T, Ref(params))\nend\n\ninit_soil!(Y, coords.z, soil.parameters);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Create the ode function for the OrdinaryDiffEq.jl ODEProblem, and choose a timestep, integration timespan, etc:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ode! = make_ode_function(soil)\nt0 = FT(0)\ndt = FT(60)\ntf = FT(3600 * 50)\n\nprob = ODEProblem(ode!, Y, (t0, tf), p);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Now we can solve the problem. Here we use an RK4 timestepper:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"sol = solve(prob, RK4(); dt = dt, saveat = 0:3600:tf);","category":"page"},{"location":"generated/Soil/freezing_front/#Comparison-to-data","page":"Phase Changes","title":"Comparison to data","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"This data was obtained by us from the figures of Hansson et al. (2004), but was originally obtained by Mizoguchi (1990). No error bars were reported, and we haven't quantified the error in our estimation of the data from images.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"af = ArtifactFile(\n    url = \"https://caltech.box.com/shared/static/3xbo4rlam8u390vmucc498cao6wmqlnd.csv\",\n    filename = \"mizoguchi_all_data.csv\",\n)\ndataset = ArtifactWrapper(@__DIR__, \"mizoguchi\", ArtifactFile[af]);\ndataset_path = get_data_folder(dataset);\ndata = joinpath(dataset_path, \"mizoguchi_all_data.csv\")\nds = readdlm(data, ',')\nhours = ds[:, 1][2:end]\nvwc = ds[:, 2][2:end] ./ 100.0\ndepth = ds[:, 3][2:end]\nmask_12h = hours .== 12\nmask_24h = hours .== 24\nmask_50h = hours .== 50;\n\nz = parent(coords.z)[:];\nplot1 = plot(\n    ylabel = \"Soil depth (m)\",\n    xlabel = \"\",\n    title = \"12 hours\",\n    xlim = [0.2, 0.55],\n    ylim = [-0.2, 0],\n)\nscatter!(plot1, vwc[mask_12h], -depth[mask_12h], label = \"\", color = \"purple\")\nplot!(\n    plot1,\n    parent(sol.u[13].soil.ϑ_l .+ sol.u[13].soil.θ_i)[:],\n    z,\n    label = \"\",\n    color = :green,\n)\n\nplot2 = plot(\n    ylabel = \"\",\n    xlabel = \"Volumetric Water content\",\n    title = \"24 hours\",\n    xlim = [0.2, 0.55],\n    ylim = [-0.2, 0],\n)\nscatter!(plot2, vwc[mask_24h], -depth[mask_24h], label = \"\", color = \"purple\")\nplot!(\n    plot2,\n    parent(sol.u[25].soil.ϑ_l .+ sol.u[25].soil.θ_i)[:],\n    z,\n    label = \"\",\n    color = :green,\n)\n\nplot3 = plot(\n    ylabel = \"\",\n    xlabel = \"\",\n    title = \"50 hours\",\n    xlim = [0.2, 0.55],\n    ylim = [-0.2, 0],\n)\nscatter!(\n    plot3,\n    vwc[mask_50h],\n    -depth[mask_50h],\n    label = \"Data\",\n    color = \"purple\",\n)\nplot!(\n    plot3,\n    parent(sol.u[51].soil.ϑ_l .+ sol.u[51].soil.θ_i)[:],\n    z,\n    label = \"Simulation\",\n    color = :green,\n)\nplot!(plot3, legend = :bottomright)\nplot(\n    plot1,\n    plot2,\n    plot3,\n    layout = (1, 3),\n    size = (1200, 500),\n    margin = 10Plots.mm,\n)\nsavefig(\"mizoguchi_data_comparison.png\");","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"(Image: )","category":"page"},{"location":"generated/Soil/freezing_front/#Discussion-and-Model-Explanation","page":"Phase Changes","title":"Discussion and Model Explanation","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"To begin, let's observe that the freeze thaw source term alone conserves water mass, as it satisfies","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ρ_l partial_tϑ_l + ρ_i partial_tθ_i = -F_T + F_T = 0","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Next, we describe how we define F_T. The Clausius-Clapeyron (CC) equation defines a pressure-temperature curve along which two phases can co-exist. It assumes that the phases are at equal temperature and pressures. For water in soil, however, the liquid water experiences pressure ρ_l g ψ, where ψ is the matric potential. A more general form of the CC equation allows for different pressures in the two phases. Usually the ice pressure is taken to be zero, which is reasonable for unsaturated freezing soils. In saturated soils, freezing can lead to heaving of the soil which we do not model. After that assumption is made, we obtain that, below freezing (T  T_f)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"fracdp_lρ_l = L_f fracdTT","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"or","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"p_l = p_l0 + L_f ρ_l fracT-T_fT_f mathcalH(T_f-T)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"where we have assumed that assumed T is near the freezing point, and then performed a Taylor explansion of the logarithm, and we are ignoring the freezing point depression, which is small (less than one degree) for non-clay soils. What we have sketched is further explained in Dall'Amico et al. (2011) and Kurylyk and Watanabe (2013).","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"What this implies is that above the freezing point, the pressure is equal to p_l0, which is independent of temperature. Once the temperature drops below the freezing point, the pressure drops. Since prior to freezing, the pressure p_l0 is equal to ρ_l g ψ(θ_l), water undergoing freezing alone (without flowing) should satisfy (Dall'Amico et al. (2011)):","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"p_l0 = ρ_l g ψ(θ_l+ρ_iθ_iρ_l)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"where ψ is the matric potential function of van Genuchten. At each step, we know both the water and ice contents, as well as the temperature, and can then solve for","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"θ_l^* = (ν-θ_r) ψ^-1(p_l(ρ_l g)) + θ_r","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"For freezing, the freeze thaw function F_T is equal to","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"F_T = frac1τ ρ_l (θ_l-θ_l^*) mathcalH(T_f-T) mathcalH(θ_l-θ_l^*)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"which brings the θ_l to a value which satisfies p_l = ρ_l g ψ(θ_l). This is why, in our simulation, we see the liquid water fraction approaches a constant around 0.075 in the frozen region, rather than the residual fraction of 0.019, or 0. This behavior is observed, for example, in the experiments of Watanabe et al. (2011).","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Although this approach may indicate that we should replace the pressure head appearing in the diffusive water flux term in Richards equation (Dall'Amico et al. (2011)), we do not do so at present. As such, we may not be modeling the flow of water around the freezing front properly. However, we still observe cryosuction, which is the flow of water towards the freezing front, from the unfrozen side. As the water freezes, the liquid water content drops, setting up a larger gradient in matric potential across the freezing front, which generates upward flow against gravity. This is evident because the total water content at the top is larger at the end of the simulation than it was at t=0 (when it was 0.33).","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"This model differs from others (e.g. Painter and Karra (2014), Hansson et al. (2004), Dall'Amico et al. (2011))  in that it requires us to set a timescale for the phase change, τ. We currently use the thermal time","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"τ_LTE= c Δz²κ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"which seems to work adequately for modeling freezing front propagation and cryosuction, via comparisons with Mizoguchi (1990).","category":"page"},{"location":"generated/Soil/freezing_front/#References","page":"Phase Changes","title":"References","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Mizoguchi, M., 1990. Water, heat and salt transport in freezing soil. Ph.D. thesis. (In Japanese.) University of Tokyo.\nHansson et al., Vadose Zone Journal 3:693–704 (2004).\nM. Dall’Amico et al., The Cryosphere, 5, 469–484 (2011).\nKurylyk and Watanabe, Advances in Water Resources, Volume 60, (2013)\nWatanabe et al. 2011, Annals of Glaciology , Volume 52 , Issue 58\nPainter and Karra, Vadose Zone Journal (2014) 13 (4)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/Vegetation/#Vegetation","page":"Vegetation Models","title":"Vegetation","text":"","category":"section"},{"location":"APIs/Vegetation/","page":"Vegetation Models","title":"Vegetation Models","text":"CurrentModule = ClimaLSM.PlantHydraulics","category":"page"},{"location":"APIs/Vegetation/#Models","page":"Vegetation Models","title":"Models","text":"","category":"section"},{"location":"APIs/Vegetation/","page":"Vegetation Models","title":"Vegetation Models","text":"ClimaLSM.PlantHydraulics.AbstractVegetationModel\nClimaLSM.PlantHydraulics.PlantHydraulicsModel","category":"page"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.AbstractVegetationModel","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.AbstractVegetationModel","text":"AbstractVegetationModel{FT} <: AbstractModel{FT}\n\nAn abstract type for vegetation models. Concrete types include a plant hydraulics model, but future types will include multi-layer canopy models and possibly a big leaf model.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.PlantHydraulicsModel","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.PlantHydraulicsModel","text":"PlantHydraulicsModel{FT, PS, D, RE, T, B} <: AbstractVegetationModel{FT}\n\nDefines, and constructs instances of, the PlantHydraulicsModel type, which is used for simulation flux of water to/from soil, along roots of different depths, along a stem, to a leaf, and ultimately being lost from the system by transpiration.  This model can be used in standalone mode by prescribing the transpiration rate and soil matric potential at the root tips or flux in the roots, or with a  dynamic soil model using ClimaLSM.\n\nparameters: Parameters required by the Plant Hydraulics model\ndomain: The plant hydraulics model domain, of type AbstractVegetationDomain\nroot_extraction: The root extraction model, of type AbstractRootExtraction\ntranspiration: The transpiration model, of type AbstractTranspiration\n\n\n\n\n\n","category":"type"},{"location":"APIs/Vegetation/#Plan-Hydraulics-Diagnostic-Variables","page":"Vegetation Models","title":"Plan Hydraulics Diagnostic Variables","text":"","category":"section"},{"location":"APIs/Vegetation/","page":"Vegetation Models","title":"Vegetation Models","text":"ClimaLSM.PlantHydraulics.effective_saturation\nClimaLSM.PlantHydraulics.augmented_liquid_fraction\nClimaLSM.PlantHydraulics.water_retention_curve\nClimaLSM.PlantHydraulics.inverse_water_retention_curve\nClimaLSM.PlantHydraulics.flux_out_roots\nClimaLSM.PlantHydraulics.flux","category":"page"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.effective_saturation","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.effective_saturation","text":"effective_saturation(\n    ν::FT, \n    ϑ_l::FT) where {FT}\n\nComputes the effective saturation (volumetric water content relative to porosity).\n\n\n\n\n\n","category":"function"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.augmented_liquid_fraction","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.augmented_liquid_fraction","text":"augmented_liquid_fraction(\n    ν::FT, \n    S_l::FT) where {FT}\n\nComputes the augmented liquid fraction from porosity and effective saturation. Augmented liquid fraction allows for oversaturation: an expansion of the volume of space available for storage in a plant compartment. It is analogous to the augmented liquid fraction state variable in the soil model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.water_retention_curve","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.water_retention_curve","text":"water_retention_curve(\n    vg_α::FT,\n    vg_n::FT,\n    vg_m::FT,\n    S_l::FT,\n    ν::FT,\n    S_s::FT) where {FT}\n\nConverts augmented liquid fraction (ϑl) to effective saturation  (Sl), and then effective saturation to absolute pressure, represented by the height (ψ) of the water column that would give rise to this pressure. Pressure for both the unsaturated and saturated regimes are calculated. Units are in meters. \n\n\n\n\n\n","category":"function"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.inverse_water_retention_curve","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.inverse_water_retention_curve","text":"inverse_water_retention_curve(\n    vg_α::FT,\n    vg_n::FT,\n    vg_m::FT,\n    ψ::FT,\n    ν::FT,\n    S_s::FT) where {FT}\n\nConverts absolute pressure, represented by the height (ψ) of the water column that would give rise to this pressure, to effective saturation (S_l).\n\n\n\n\n\n","category":"function"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.flux_out_roots","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.flux_out_roots","text":"flux_out_roots(\n    re::PrescribedSoilPressure{FT},\n    model::PlantHydraulicsModel{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::ClimaCore.Fields.FieldVector,\n    t::FT,\n)::FT where {FT}\n\nA method which computes the flux between the soil and the stem, via the roots, in the case of a standalone plant hydraulics model with prescribed soil pressure (in m) at the root tips. This assumes that the stem compartment is the first element of Y.vegetation.ϑ_l.\n\n\n\n\n\nPlantHydraulics.flux_out_roots(\n    re::PrognosticSoilPressure{FT},\n    model::PlantHydraulics.PlantHydraulicsModel{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::ClimaCore.Fields.FieldVector,\n    t::FT,\n)::FT where {FT}\n\nAn extension of the PlantHydraulics.flux_out_roots function,  which returns the net flux of water between the roots and the soil, when both soil and plant hydraulics are modeled prognostically. This is for use in an LSM.\n\nIt is computed by summing the flux of water between roots and soil at each soil layer.\n\n\n\n\n\nPlantHydraulics.flux_out_roots(\n    re::PrognosticRootFlux{FT},\n    t::FT,\n)::FT where {FT}\n\nAn extension of the PlantHydraulics.flux_out_roots function,  which returns the net flux of water between the roots and the soil, when both soil and plant hydraulics are modeled prognostically. This is for use in an LSM.\n\nIt is computed by summing the flux of water between roots and soil at each soil layer.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.flux","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.flux","text":"flux(\n    z1,\n    z2,\n    ψ1,\n    ψ2,\n    vg_α,\n    vg_n,\n    vg_m,\n    ν,\n    S_s,\n    K_sat1,\n    K_sat2,\n\n) where {FT}  Computes the water flux given 1) the absolute pressure (represented by corresponding water column height) at two points located at z1 and z2,  corresponding here to the middle of each compartment  (for eg. a stem or leaf compartment), and 2) the maximum conductivity along  the flow path between these two points, assuming an arithmetic  mean for mean Ksat between the two points (Bonan, 2019; Zhu, 2008)  to take into account the change in Ksat halfway  between z1 and z2. The expression is given in full in the Clima docs in section 6.4 \"Bulk plant hydraulics model\".\n\n\n\n\n\n","category":"function"},{"location":"APIs/Vegetation/#Plan-Hydraulics-Parameters","page":"Vegetation Models","title":"Plan Hydraulics Parameters","text":"","category":"section"},{"location":"APIs/Vegetation/","page":"Vegetation Models","title":"Vegetation Models","text":"ClimaLSM.PlantHydraulics.PlantHydraulicsParameters","category":"page"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.PlantHydraulicsParameters","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.PlantHydraulicsParameters","text":"PlantHydraulicsParameters{FT <: AbstractFloat}\n\nA struct for holding parameters of the PlantHydraulics Model.\n\narea_index: RAI, SAI, LAI in [m2 m-2]\nK_sat: water conductivity in the above-ground plant compartments (m/s) when pressure is zero, a maximum\nvg_α: van Genuchten parameter (1/m)\nvg_n: van Genuchten parameter (unitless)\nvg_m: van Genuchten parameter (unitless)\nν: porosity (m3/m3)\nS_s: storativity (m3/m3)\nroot_distribution: Root distribution function P(z)\nearth_param_set: Physical Constants and other Clima-wide parameters\n\n\n\n\n\n","category":"type"},{"location":"APIs/Vegetation/#Plan-Hydraulics-Methods-and-Types","page":"Vegetation Models","title":"Plan Hydraulics Methods and Types","text":"","category":"section"},{"location":"APIs/Vegetation/","page":"Vegetation Models","title":"Vegetation Models","text":"ClimaLSM.PlantHydraulics.PrescribedSoilPressure\nClimaLSM.PlantHydraulics.PrescribedTranspiration\nClimaLSM.PlantHydraulics.AbstractRootExtraction","category":"page"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.PrescribedSoilPressure","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.PrescribedSoilPressure","text":"PrescribedSoilPressure{FT} <: AbstractRootExtraction{FT}\n\nA concrete type used for dispatch when computing the flux_out_roots, in the case where the soil matric potential at each root layer is prescribed.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.PrescribedTranspiration","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.PrescribedTranspiration","text":"PrescribedTranspiration{FT} <: AbstractTranspiration{FT}\n\nA concrete type used for dispatch when computing the transpiration from the leaves, in the case where transpiration is prescribed.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Vegetation/#ClimaLSM.PlantHydraulics.AbstractRootExtraction","page":"Vegetation Models","title":"ClimaLSM.PlantHydraulics.AbstractRootExtraction","text":"AbstractRootExtraction{FT <: AbstractFloat}\n\nAn abstract type for types representing different models of water exchange between soil and plants. Currently, prescribed soil matric potential and prescribed flux models  are supported for standalone plant hydraulics.  Use within an LSM requires types defined within ClimaLSM,  and include a prognostic soil pressure for models with both soil and roots.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Models","page":"Soil Energy and Hydrology","title":"Soil Models","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"CurrentModule = ClimaLSM.Soil","category":"page"},{"location":"APIs/Soil/#Soil-Models-2","page":"Soil Energy and Hydrology","title":"Soil Models","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.AbstractSoilModel\nClimaLSM.Soil.RichardsModel\nClimaLSM.Soil.EnergyHydrology","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilModel","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilModel","text":"AbstractSoilModel{FT} <: AbstractModel{FT}\n\nThe abstract type for all soil models.\n\nCurrently, we only have plans to support a RichardsModel, simulating the flow of liquid water through soil via the Richardson-Richards equation, and a fully integrated soil heat and water model, with phase change.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.RichardsModel","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.RichardsModel","text":"RichardsModel\n\nA model for simulating the flow of water in a porous medium by solving the Richardson-Richards Equation.\n\nparameters: the parameter set\ndomain: the soil domain, using ClimaCore.Domains\nboundary_conditions: the boundary conditions, of type AbstractSoilBoundaryConditions\nsources: A tuple of sources, each of type AbstractSoilSource\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.EnergyHydrology","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.EnergyHydrology","text":"EnergyHydrology <: AbstractSoilModel\n\nA model for simulating the flow of water and heat  in a porous medium by solving the Richardson-Richards equation and the heat equation, including terms for phase change.\n\nparameters: The parameter sets\ndomain: the soil domain, using ClimaCore.Domains\nboundary_conditions: the boundary conditions for RRE and heat, of type AbstractSoilBoundaryConditions\nsources: A tuple of sources, each of type AbstractSoilSource\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Functions-of-State","page":"Soil Energy and Hydrology","title":"Soil Functions of State","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.volumetric_liquid_fraction\nClimaLSM.Soil.pressure_head\nClimaLSM.Soil.hydraulic_conductivity\nClimaLSM.Soil.impedance_factor\nClimaLSM.Soil.viscosity_factor\nClimaLSM.Soil.effective_saturation\nClimaLSM.Soil.matric_potential\nClimaLSM.Soil.inverse_matric_potential\nClimaLSM.Soil.volumetric_heat_capacity\nClimaLSM.Soil.κ_solid\nClimaLSM.Soil.κ_sat_frozen\nClimaLSM.Soil.κ_sat_unfrozen\nClimaLSM.Soil.κ_sat\nClimaLSM.Soil.κ_dry\nClimaLSM.Soil.kersten_number\nClimaLSM.Soil.relative_saturation\nClimaLSM.Soil.volumetric_internal_energy\nClimaLSM.Soil.volumetric_internal_energy_liq\nClimaLSM.Soil.temperature_from_ρe_int\nClimaLSM.Soil.thermal_conductivity\nClimaLSM.Soil.phase_change_source\nClimaLSM.Soil.thermal_time","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_liquid_fraction","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_liquid_fraction","text":"volumetric_liquid_fraction(ϑ_l::FT, ν_eff::FT) where {FT}\n\nA pointwise function returning the volumetric liquid fraction given the augmented liquid fraction and the effective porosity.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.pressure_head","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.pressure_head","text":"pressure_head(\n    α::FT,\n    n::FT,\n    m::FT,\n    θ_r::FT,\n    ϑ_l::FT,\n    ν_eff::FT,\n    S_s::FT,\n) where {FT}\n\nA point-wise function returning the pressure head in variably saturated soil, using the van Genuchten formulation for matric potential if the soil is not saturated, and an approximation of the positive pressure in the soil if the soil is saturated.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.hydraulic_conductivity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.hydraulic_conductivity","text":" hydraulic_conductivity(K_sat::FT, m::FT, S::FT) where {FT}\n\nA point-wise function returning the hydraulic conductivity, using the van Genuchten formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.impedance_factor","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.impedance_factor","text":"impedance_factor(\n    f_i::FT,\n    Ω::FT\n) where {FT}\n\nReturns the multiplicative factor reducing conductivity when  a fraction of ice f_i is present.\n\nOnly for use with the EnergyHydrology model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.viscosity_factor","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.viscosity_factor","text":"viscosity_factor(\n    T::FT,\n    γ::FT,\n    γT_ref::FT,\n) where {FT}\n\nReturns the multiplicative factor which accounts for the temperature dependence of the conductivity.\n\nOnly for use with the EnergyHydrology model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.effective_saturation","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.effective_saturation","text":"effective_saturation(porosity::FT, ϑ_l::FT, θr::FT) where {FT}\n\nA point-wise function computing the effective saturation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.matric_potential","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.matric_potential","text":" matric_potential(α::FT, n::FT, m::FT, S::FT) where {FT}\n\nA point-wise function returning the matric potential, using the van Genuchten formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.inverse_matric_potential","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.inverse_matric_potential","text":" inverse_matric_potential(α::FT, n::FT, m::FT, ψ::FT) where {FT}\n\nA point-wise function returning the effective saturation, given the matric potential, using the van Genuchten formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_heat_capacity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_heat_capacity","text":"volumetric_heat_capacity(\n    θ_l::FT,\n    θ_i::FT,\n    parameters::EnergyHydrologyParameters{FT},\n) where {FT}\n\nCompute the expression for volumetric heat capacity.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_solid","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_solid","text":"κ_solid(ν_ss_om::FT,\n        ν_ss_quartz::FT,\n        κ_om::FT,\n        κ_quartz::FT,\n        κ_minerals::FT) where {FT}\n\nComputes the thermal conductivity of the solid material in soil. The _ss_ subscript denotes that the volumetric fractions of the soil components are referred to the soil solid components, not including the pore space.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_sat_frozen","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_sat_frozen","text":"function κ_sat_frozen(\n    κ_solid::FT,\n    ν::FT,\n    κ_ice::FT\n) where {FT}\n\nComputes the thermal conductivity for saturated frozen soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_sat_unfrozen","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_sat_unfrozen","text":"function κ_sat_unfrozen(\n    κ_solid::FT,\n    ν::FT,\n    κ_l::FT\n) where {FT}\n\nComputes the thermal conductivity for saturated unfrozen soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_sat","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_sat","text":"κ_sat(\n    θ_l::FT,\n    θ_i::FT,\n    κ_sat_unfrozen::FT,\n    κ_sat_frozen::FT\n) where {FT}\n\nCompute the expression for saturated thermal conductivity of soil matrix.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_dry","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_dry","text":"function κ_dry(ρp::FT,\n               ν::FT,\n               κ_solid::FT,\n               κ_air::FT;\n               a::FT = 0.053) where {FT}\n\nComputes the thermal conductivity of dry soil according to the model of Balland and Arp.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.kersten_number","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.kersten_number","text":"kersten_number(\n    θ_i::FT,\n    S_r::FT,\n    parameters::EnergyHydrologyParameters{FT},\n) where {FT}\n\nCompute the expression for the Kersten number, using the Balland and Arp model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.relative_saturation","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.relative_saturation","text":"relative_saturation(\n        θ_l::FT,\n        θ_i::FT,\n        ν::FT\n) where {FT}\n\nCompute the expression for relative saturation.  This is referred to as θ_sat in Balland and Arp's paper.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_internal_energy","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_internal_energy","text":"volumetric_internal_energy(θ_i::FT, ρc_s::FT, T::FT,\n                             parameters::EnergyHydrologyParameters{FT}) where {FT}\n\nA pointwise function for computing the volumetric internal energy of the soil, given the volumetric ice content, volumetric heat capacity, and temperature.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_internal_energy_liq","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_internal_energy_liq","text":"volumetric_internal_energy_liq(T::FT, parameters::EnergyHydrologyParameters{FT}) where {FT}\n\nA pointwise function for computing the volumetric internal energy of the liquid water in the soil, given the temperature T.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.temperature_from_ρe_int","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.temperature_from_ρe_int","text":"temperature_from_ρe_int(ρe_int::FT, θ_i::FT, ρc_s::FT\n                        parameters::EnergyHydrologyParameters{FT}) where {FT}\n\nA pointwise function for computing the temperature from the volumetric internal energy, volumetric ice content, and volumetric heat capacity of the soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.thermal_conductivity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.thermal_conductivity","text":"thermal_conductivity(\n    κ_dry::FT,\n    K_e::FT,\n    κ_sat::FT\n) where {FT}\n\nCompute the expression for thermal conductivity of soil matrix.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.phase_change_source","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.phase_change_source","text":"phase_change_source(\n    θ_l::FT,\n    θ_i::FT,\n    T::FT,\n    τ::FT,\n    params::EnergyHydrologyParameters{FT},\n) where {FT}\n\nReturns the source term (1/s) used for converting liquid water and ice into each other during phase changes. Note that there are unitless prefactors multiplying this term in the  equations.\n\nNote that these equations match what is in Dall'Amico (for θstar, ψ(T), ψw0). We should double check them in the case where we have ϑl > θl, but they should be very close to the form we want regardless.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.thermal_time","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.thermal_time","text":"thermal_time(ρc::FT, Δz::FT, κ::FT) where {FT}\n\nReturns the thermal timescale for temperature differences across a typical thickness Δz to equilibrate.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#Soil-Parameters","page":"Soil Energy and Hydrology","title":"Soil Parameters","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.RichardsParameters\nClimaLSM.Soil.EnergyHydrologyParameters","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.RichardsParameters","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.RichardsParameters","text":"RichardsParameters{FT <: AbstractFloat}\n\nA struct for storing parameters of the RichardModel.\n\nν: The porosity of the soil (m^3/m^3)\nvg_α: The van Genuchten parameter α (1/m)\nvg_n: The van Genuchten parameter n\nvg_m: The van Genuchten parameter m\nK_sat: The saturated hydraulic conductivity (m/s)\nS_s: The specific storativity (1/m)\nθ_r: The residual water fraction (m^3/m^3\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.EnergyHydrologyParameters","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.EnergyHydrologyParameters","text":"EnergyHydrologyParameters{FT <: AbstractFloat}\n\nA parameter structure for the integrated soil water and energy  equation system. In this simplest form, we assume the conductivity and volumetric heat capacity of the soil are constant.\n\nκ_dry: The dry soil thermal conductivity, W/m/K\nκ_sat_frozen: The saturated thermal conductivity of frozen soil, W/m/K\nκ_sat_unfrozen: The saturated thermal conductivity of unfrozen soil, W/m/K\nρc_ds: The volumetric heat capacity of dry soil, J/m^3/K\nν: The porosity of the soil (m^3/m^3)\nν_ss_om: The volumetric fraction of the soil solids in organic matter (m^3/m^3)\nν_ss_quartz: The volumetric fraction of the soil solids in quartz (m^3/m^3)\nν_ss_gravel: The volumetric fraction of the soil solids in gravel (m^3/m^3)\nα: The parameter α used in computing Kersten number, unitless\nβ: The parameter β used in computing Kersten number, unitless\nvg_α: The van Genuchten parameter α (1/m)\nvg_n: The van Genuchten parameter n\nvg_m: The van Genuchten parameter m\nK_sat: The saturated hydraulic conductivity (m/s)\nS_s: The specific storativity (1/m)\nθ_r: The residual water fraction (m^3/m^3\nΩ: Ice impedance factor for the hydraulic conductivity\nγ: Coefficient of viscosity factor for the hydraulic conductivity\nγT_ref: Reference temperature for the viscosity factor\nearth_param_set: Physical constants and clima-wide parameters\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-BC-and-Source-Methods-and-Types","page":"Soil Energy and Hydrology","title":"Soil BC and Source Methods and Types","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.AbstractSoilBC\nClimaLSM.Soil.StateBC\nClimaLSM.Soil.FluxBC\nClimaLSM.Soil.StateBC\nClimaLSM.Soil.FreeDrainage\nClimaLSM.Soil.AbstractSoilSource\nClimaLSM.Soil.PhaseChange","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilBC","text":"AbstractSoilBC <: ClimaLSM. AbstractBC\n\nAn abstract type for soil-specific types of boundary conditions, like free drainage.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.StateBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.StateBC","text":"StateBC <: AbstractSoilBC\n\nA simple concrete type of boundary condition, which enforces a state boundary condition f(p,t) at either the top or bottom of the domain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.FluxBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.FluxBC","text":"FluxBC <: AbstractSoilBC\n\nA simple concrete type of boundary condition, which enforces a normal flux boundary condition f(p,t) at either the top or bottom of the domain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.FreeDrainage","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.FreeDrainage","text":"FreeDrainage{FT} <: AbstractSoilBC\n\nA concrete type of soil boundary condition, for use at  the BottomBoundary only, where the flux is set to be F = -K∇h = -K.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilSource","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilSource","text":"AbstractSoilSource{FT} <:  ClimaLSM.AbstractSource{FT}\n\nAn abstract type for types of source terms for the soil equations.\n\nIn standalone mode, the only supported source type is freezing and  thawing. ClimaLSM.jl creates additional sources to include as necessary e.g. root extraction (not available in stand alone mode).\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.PhaseChange","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.PhaseChange","text":"PhaseChange{FT} <: AbstractSoilSource{FT}\n\nPhaseChange source type.\n\n\n\n\n\n","category":"type"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/#Introduction-to-the-Land-Bucket-Model","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"","category":"section"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The land bucket model implemented in ClimaLSM is based off of the models of Manabe (1969)[1], Milly and Shmakin (2002)[2], and the SLIM model (Laguë, Bonan, Swann 2019)[3], with small changes, as noted.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"This tutorial explains in brief the core equations and the necessary parameters of the bucket model, and shows how to set up a simulation in standalone mode. More detail for coupled runs can be found in the ClimaCoupler.jl documentation and in the coupled simulation tutorial.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"At each coordinate point on the surface, we solve ordinary differential equations for the subsurface water storage of land (W, m), the snow water equivalent multiplied by the snow cover fraction (σS, m), and the surface water content of land (Ws, m). We additionally solve a partial differential equation for the land temperature as a function of depth (T, K). The snow cover fraction is given by a heaviside function in the current code.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"In what follows, surface fluxes over soil generally indicate fluxes over non-snow-covered regions. The exception is the albedo of vegetated and non-vegetated surfaces, for which we use the symbol α_sfc.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We have:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"fracd Wdt = I","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"fracd Wsdt = P_liq + σM - (1-σ) E_soil - I","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"fracd σSdt = P_snow - σ(E_snow + M)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ρc fracpartial Tpartial t = κ_soil fracpartial Tpartial z","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"F_bot = 00 = -κ_soil fracpartial Tpartial z_z = z_bot","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(1-σ) (R_n+ SHF + LHF)_soil + σG_undersnow = -κ_soil fracpartial Tpartial z_z = z_sfc","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"G_undersnow = (R_n+ SHF + LHF)_snow - F_intosnow","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"F_intosnow = -ρ_l L_f0 (M+E_snow)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"R_n = -(1-α)*SW -LW + σ_SB T_sfc^4","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"where the water fluxes are : I the infiltration as defined in [1], P_liq (m/s) the water volume flux of precipitation, P_snow (m/s) the water volume flux in the form of snow, (1-σ)E_soil (m/s) the water volume flux in evaporation, σE_snow the water volume flux in sublimation from snow, and σM (m/s) the water volume flux in melting of snow. The melt rate is defined via the net surface flux when surface temperatures are above freezing.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"For heat fluxes, we have R_n the net radiation, SHF the sensible heat flux, LHF the latent heat flux, G_undersnow the heat flux into snow-covered soil, and F_intosnow the heat flux into the snowpack itself. Note that the water balance equation for snow is equivalent to the heat balance equation, since we neglect the sensible heat contribution and only track the latent heat contribution.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Finally, we have α_sfc(lat, lon) the (snow-free) surface albedo, ρc the volumetric heat capacity of the land, σ_SB the Stefan-Boltzmann constant,  and κ_soil the thermal conductivity. The albedo is a linear interpolation between the albedo of surface and snow, as decribed in [3]. The surface temperature is taken to be equal to the temperature T at the first grid point, assumed to be the same for soil and snow. At present the snow cover fraction is a heaviside function, and only one set of surface fluxes is computed per grid point.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Turbulent surface fluxes of sensible heat, latent heat, and water vapor (SHF, LHF, E) are computed using Monin-Obukhov theory; SW↓ and LW↓ are the downward fluxes in short and long wavelength bands. We use the same roughness lengths for snow and soil. Note that with the exception of precipitation and downwelling radiation, all fluxes are defined such that positive is towards the atmosphere.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"As the temperature at the surface of the soil and snow is the same, only the evaporation changes between the two surface coverage types. We have","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"E_soil =  β(W W_f) E(q_sat(T_sfc ρ_sfc liquid)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"where β is the factor used in [1] which accounts for the fact that soil does not evaporate at the potential rate when it is not saturated. This makes use of the field capacity parameter W_f. We also have","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"E_snow = E(q_sat(T_sfc ρ_sfc ice)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/#Simulating-a-standalone-bucket-model","page":"Introduction to the Land Bucket Model","title":"Simulating a standalone bucket model","text":"","category":"section"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"First, we need to import necessary packages. We use OrdinaryDiffEq.jl for the timestepping, and DiffEqCallbacks.jl is used as described below, for accessing the solver state during the integration.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using OrdinaryDiffEq: ODEProblem, solve, Midpoint\nusing DiffEqCallbacks","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We use ClimaCore for setting up the domain/coordinate points. While this infrastructure isn't really necessary for standalone simulations, adhering to it makes setting up coupled simulations very easy. It also is nice to rely on ClimaCore utilities because they have been designed in advance for running distributed simulations.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using ClimaCore","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also use CLIMAParameters, which strives to ensure a common set of parameters across all Clima models, and to make parameter estimation more seamless.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"import CLIMAParameters as CP","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Lastly, let's bring in the bucket model types (from ClimaLSM) that we will need access to.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using ClimaLSM.Bucket:\n    BucketModel,\n    BucketModelParameters,\n    PrescribedAtmosphere,\n    PrescribedRadiativeFluxes,\n    BulkAlbedoFunction\nusing ClimaLSM.Domains: coordinates, LSMSingleColumnDomain\nusing ClimaLSM:\n    initialize, make_update_aux, make_ode_function, make_set_initial_aux_state","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also want to plot the solution","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using Plots\n\nFT = Float64;","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"As mentioned we use CLIMAParameters for earth parameters that are required across models (e.g. the density of water and ice, the latent heat of fusion at a reference temperature, etc). The land model requires additional parameters as described in the text above. These two sets are combined in the object BucketModelParameters as follows:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"import ClimaLSM\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Define our BulkAlbedoFunction model using a constant surface and snow albedo: The surface albedo is a function of coordinates, which would be (x,y) on a plane, and (lat,lon) on a sphere. Another albedo option is to specify a BulkAlbedoMap, which uses a NetCDF file to read in surface albedo. This option only applies when coordinates are (lat,lon).","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"α_sfc = (coordinate_point) -> FT(0.2);\nα_snow = FT(0.8);\nalbedo = BulkAlbedoFunction{FT}(α_snow, α_sfc);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The critical snow level setting the scale for when we interpolate between snow and surface albedo","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"σS_c = FT(0.2);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The field capacity of the soil","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"W_f = FT(0.15);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Roughness lengths (meters)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"z_0m = FT(1e-2);\nz_0b = FT(1e-3);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Thermal parameters of soil","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"κ_soil = FT(0.7);\nρc_soil = FT(2e6);\nΔt = FT(3600.0);\n\nbucket_parameters = BucketModelParameters(\n    κ_soil,\n    ρc_soil,\n    albedo,\n    σS_c,\n    W_f,\n    z_0m,\n    z_0b,\n    Δt,\n    earth_param_set,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Set up the model domain. At every surface coordinate point, we'll solve an ODE for W and Ws, and for every subsurface point, we solve for T. In coupled simulations run at the same resolution as the atmosphere, the bucket horizontal resolution would match the horizontal resolution at the lowest level of the atmosphere model. In general, however, the two resolutions do not need to match. Here we just set up something simple - an LSMSingleColumnDomain, consisting of a single column.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"soil_depth = FT(3.5);\nbucket_domain =\n    LSMSingleColumnDomain(; zlim = (-soil_depth, 0.0), nelements = 10);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"To drive the system in standalone mode, the user must provide prescribed functions of time for the water volume flux in precipitation,  for the net downward shortwave and longwave radiative energy fluxes (SW↓, LW↓, W/m^2), for the atmospheric temperature T_a, wind speed u_a (m/s), specific humidity q_a, and air density ρ_a (kg/m^3) at a reference height h_a (m), as well as for the air density ρ_sfc (kg/m^3) at the surface of the earth.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Here we define the model drivers, starting with downward radiation.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"SW_d = (t) -> eltype(t)(300);\nLW_d = (t) -> eltype(t)(300);\nbucket_rad = PrescribedRadiativeFluxes(FT, SW_d, LW_d);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Prescribed atmospheric variables","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Stochastic precipitation:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"precip = (t) -> eltype(t)(0);\nsnow_precip = (t) -> eltype(t)(5e-7 * (t > 3 * 86400) * (t < 4 * 86400));","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Diurnal temperature variations:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"T_atmos = (t) -> eltype(t)(275.0 + 5.0 * sin(2.0 * π * t / 86400 + 7200));","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Constant otherwise:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"u_atmos = (t) -> eltype(t)(3.0);\nq_atmos = (t) -> eltype(t)(0.005);\nh_atmos = FT(2);\nρ_atmos = (t) -> eltype(t)(1.13);\nρ_sfc = FT(1.15);\nbucket_atmos = PrescribedAtmosphere(\n    precip,\n    snow_precip,\n    T_atmos,\n    u_atmos,\n    q_atmos,\n    ρ_atmos,\n    h_atmos,\n    ρ_sfc,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Then, we create the model object, which contains the drivers, parameters, domain, and is associated with the correct differential equations for the bucket model:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"model = BucketModel(\n    parameters = bucket_parameters,\n    domain = bucket_domain,\n    atmosphere = bucket_atmos,\n    radiation = bucket_rad,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Note the holder structs for the radiation and atmosphere functions: they are named Prescribed. In coupled simulations, we would use a different type and rely on multiple dispatch to obtain the atmospheric and radiative quantitites from the coupler.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Like all ClimaLSM models, we set up the state vector using initialize:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Y, p, coords = initialize(model);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We can inspect the prognostic and auxiliary variables of the model:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ClimaLSM.prognostic_vars(model)\nY.bucket |> propertynames","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(:W, :Ws, :σS, :T)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The auxiliary variables in this case are the surface temperature, the turbulent fluxes, the net radiation, and the surface specific humidity.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ClimaLSM.auxiliary_vars(model)\np.bucket |> propertynames","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(:q_sfc, :evaporation, :turbulent_energy_flux, :R_n, :T_sfc, :α_sfc)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Next is to set initial conditions.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Y.bucket.T .= FT(270);\nY.bucket.W .= FT(0.05);\nY.bucket.Ws .= FT(0.0);\nY.bucket.σS .= FT(0.08);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also initialize the auxiliary state here:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"t0 = FT(0.0);\nset_initial_aux_state! = make_set_initial_aux_state(model);\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Then to create the entire right hand side function for the system of ordinary differential equations:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ode_function! = make_ode_function(model);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Then we can set up the simulation and solve it:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"tf = FT(7 * 86400);\nprob = ODEProblem(ode_function!, Y, (t0, tf), p);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We need a callback to get and store the auxiliary fields, as they are not stored by default.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"saved_values = SavedValues(FT, ClimaCore.Fields.FieldVector);\ncb = SavingCallback(\n    (u, t, integrator) -> copy(integrator.p),\n    saved_values;\n    saveat = 0:Δt:tf,\n);\n\nsol = solve(prob, Midpoint(); dt = Δt, saveat = 0:Δt:tf, callback = cb);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Extracting the solution from what is returned by the ODE.jl commands is a bit clunky right now, but we are working on hiding some of this. parent extracts the underlying data from the fields stored in the ClimaCore.Fields.FieldVector, and we loop over the solution sol because of how the data is stored within solutions returned by ODE.jl - indexed by timestep.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"W = [parent(sol.u[k].bucket.W)[1] for k in 1:length(sol.t)];\nWs = [parent(sol.u[k].bucket.Ws)[1] for k in 1:length(sol.t)];\nσS = [parent(sol.u[k].bucket.σS)[1] for k in 1:length(sol.t)];\nT_sfc =\n    [parent(saved_values.saveval[k].bucket.T_sfc)[1] for k in 1:length(sol.t)];\nevaporation = [\n    parent(saved_values.saveval[k].bucket.evaporation)[1] for\n    k in 1:length(sol.t)\n];\nR_n = [parent(saved_values.saveval[k].bucket.R_n)[1] for k in 1:length(sol.t)];","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The turbulent energy flux is the sum of latent and sensible heat fluxes.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"turbulent_energy_flux = [\n    parent(saved_values.saveval[k].bucket.turbulent_energy_flux)[1] for\n    k in 1:length(sol.t)\n];\n\n\nplot(\n    sol.t ./ 86400,\n    W,\n    label = \"\",\n    xlabel = \"time (days)\",\n    ylabel = \"W (m)\",\n    title = \"Land water storage (m)\",\n)\nsavefig(\"w.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/w.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    σS,\n    label = \"\",\n    xlabel = \"time (days)\",\n    ylabel = \"σS (m)\",\n    title = \"Area weighted SWE (m) \",\n)\nsavefig(\"swe.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/swe.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    -snow_precip.(sol.t),\n    label = \"Net precipitation\",\n    xlabel = \"time (days)\",\n    ylabel = \"Flux (m/s)\",\n    title = \"Surface water fluxes\",\n    legend = :bottomright,\n)\nplot!(sol.t ./ 86400, evaporation, label = \"Sublimation/Evaporation\")\nsavefig(\"water_f.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/water_f.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    T_sfc,\n    title = \"Surface Temperatures\",\n    label = \"Ground temperature\",\n    xlabel = \"time (days)\",\n    ylabel = \"T_sfc (K)\",\n    legend = :bottomright,\n)\nplot!(sol.t ./ 86400, T_atmos.(sol.t), label = \"Atmospheric Temperature\")\nsavefig(\"t.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/t.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    R_n,\n    label = \"Net radiative flux\",\n    xlabel = \"time (days)\",\n    ylabel = \"Flux (W/m^2)\",\n    title = \"Surface energy fluxes\",\n    legend = :bottomright,\n)\nplot!(sol.t ./ 86400, turbulent_energy_flux, label = \"Turbulent fluxes\")\nplot!(sol.t ./ 86400, R_n .+ turbulent_energy_flux, label = \"Net flux\")\nsavefig(\"energy_f.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/energy_f.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/#References","page":"Introduction to the Land Bucket Model","title":"References","text":"","category":"section"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"[1] Manabe, S. (1969) CLIMATE AND THE OCEAN CIRCULATION I: The Atmospheric Circulation and the Hydrology of the Earth's Surface. Monthly Weather Review, Volume 97: Issue 11, p 739-774. [2] Milly, P. C. D. and Shmakin, A.B. (2002) Global Modeling of Land Water and Energy Balances. Part I: The Land Dynamics (LaD) Model Journal of Hydrometeorology, Volume 3: Issue 3, p 283-299. [3] Laguë, M., Bonan, G., and Swann, A. (2019) Seperating the Impact of Individual Land Surface Properties on the Terrestrial Surface Energy Budget in both the Coupled and Uncoupled Land-Atmosphere System Volume 32: Issue 18, p 5725-5744","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM","page":"ClimaLSM","title":"ClimaLSM","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"CurrentModule = ClimaLSM","category":"page"},{"location":"APIs/ClimaLSM/#LSM-Model-Types-and-methods","page":"ClimaLSM","title":"LSM Model Types and methods","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.SoilPlantHydrologyModel\nClimaLSM.LandHydrology\nClimaLSM.make_interactions_update_aux\nClimaLSM.initialize_interactions\nClimaLSM.land_components\nClimaLSM.interaction_vars\nClimaLSM.interaction_types\nClimaLSM.interaction_domains\nClimaLSM.domain","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM.SoilPlantHydrologyModel","page":"ClimaLSM","title":"ClimaLSM.SoilPlantHydrologyModel","text":"struct SoilPlantHydrologyModel{\n    FT,\n    SM <: Soil.AbstractSoilModel{FT},\n    VM <: PlantHydraulics.AbstractVegetationModel{FT},\n} <: AbstractLandModel{FT}\n    soil::SM\n    vegetation::VM\nend\n\nA concrete type of land model used for simulating systems with a  vegetation and a soil component.\n\nsoil: The soil model to be used\nvegetation: The vegetation model to be used\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.LandHydrology","page":"ClimaLSM","title":"ClimaLSM.LandHydrology","text":"struct LandHydrology{\n    FT,\n    SM <: Soil.AbstractSoilModel{FT},\n    SW <: Pond.AbstractSurfaceWaterModel{FT},\n} <: AbstractLandModel{FT}\n\nA concrete type of land model used for simulating systems with a  soil and surface water component.\n\nsoil: The soil model\nsurface_water: The surface water model\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.make_interactions_update_aux","page":"ClimaLSM","title":"ClimaLSM.make_interactions_update_aux","text":"make_interactions_update_aux(land::AbstractLandModel) end\n\nMakes and returns a function which updates the interaction variables,  which are a type of auxiliary variable.\n\nThe update_aux! function returned is evaluted during the right hand side evaluation.\n\nThis is a stub which concrete types of LSMs extend.\n\n\n\n\n\nmake_interactions_update_aux(\n    land::SoilPlantHydrologyModel{FT, SM, RM},\n) where {FT, SM <: Soil.RichardsModel{FT}, RM <: PlantHydraulics.PlantHydraulicsModel{FT}}\n\nA method which makes a function; the returned function  updates the auxiliary variable p.root_extraction, which is needed for both the boundary condition for the soil model and the source term (runoff) for the surface water model.\n\nThis function is called each ode function evaluation.\n\n\n\n\n\nfunction make_interactions_update_aux(\n    land::LandHydrology{FT, SM, SW},\n) where {FT, SM <: Soil.RichardsModel{FT}, SW <: Pond.PondModel{FT}}\n\nA method which makes a function; the returned function  updates the auxiliary variable p.soil_infiltration, which is needed for both the boundary condition for the soil model and the source term (runoff) for the surface water model.\n\nThis function is called each ode function evaluation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.initialize_interactions","page":"ClimaLSM","title":"ClimaLSM.initialize_interactions","text":"initialize_interactions(land::AbstractLandModel) end\n\nInitializes interaction variables, which are a type of auxiliary variable, to empty objects of the correct type for the model. \n\nInteraction variables are specified by interaction_vars, their types by interaction_types, and their spaces by interaction_spaces.  This function should be called during initialize_auxiliary step.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.land_components","page":"ClimaLSM","title":"ClimaLSM.land_components","text":"land_components(land::AbstractLandModel)\n\nReturns the component names of the land model, by calling propertynames(land).\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.interaction_vars","page":"ClimaLSM","title":"ClimaLSM.interaction_vars","text":"interaction_vars(m::AbstractModel)\n\nReturns the interaction variable symbols for the model in the form of a tuple.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.interaction_types","page":"ClimaLSM","title":"ClimaLSM.interaction_types","text":"interaction_types(m::AbstractModel)\n\nReturns the shared interaction variable types for the model in the form of a tuple.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.interaction_domains","page":"ClimaLSM","title":"ClimaLSM.interaction_domains","text":"interaction_domains(m::AbstractModel)\n\nReturns the interaction domain symbols in the form of a tuple e.g. :surface or :subsurface.\n\nThis is only required for variables shared between land submodels, and only needed for multi-component models, not standalone components. Component-specific variables should be listed as prognostic or auxiliary variables which do not require this to initialize.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.domain","page":"ClimaLSM","title":"ClimaLSM.domain","text":"domain(model::AbstractModel)\n\nReturns a symbol indicating the model's domain, e.g. :surface or :subsurface\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#Land-Hydrology","page":"ClimaLSM","title":"Land Hydrology","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.infiltration_capacity\nClimaLSM.infiltration_at_point\nClimaLSM.PrognosticRunoff\nClimaLSM.RunoffBC","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM.infiltration_capacity","page":"ClimaLSM","title":"ClimaLSM.infiltration_capacity","text":"function infiltration_capacity(\n    model::Soil.AbstractSoilModel{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::ClimaCore.Fields.FieldVector,\n) where {FT}\n\nFunction which computes the infiltration capacity of the soil based on soil characteristics, moisture levels, and pond height.\n\nDefined such that positive means into soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.infiltration_at_point","page":"ClimaLSM","title":"ClimaLSM.infiltration_at_point","text":"infiltration_at_point(η::FT, i_c::FT, P::FT)\n\nReturns the infiltration given pond height η, infiltration capacity, and precipitation. \n\nThis is defined such that positive means into soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.PrognosticRunoff","page":"ClimaLSM","title":"ClimaLSM.PrognosticRunoff","text":"PrognosticRunoff{FT} <: Pond.AbstractSurfaceRunoff{FT}\n\nConcrete type of Pond.AbstractSurfaceRunoff for use in LSM models, where precipitation is passed in, but infiltration is computed prognostically.\n\nThis is paired with Soil.RunoffBC: both are used at the same time, ensuring the infiltration used for the boundary condition of soil is also used to compute the runoff for the surface water.\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.RunoffBC","page":"ClimaLSM","title":"ClimaLSM.RunoffBC","text":"RunoffBC <: Soil.AbstractSoilBC\n\nConcrete type of Soil.AbstractSoilBC for use in LSM models, where precipitation is passed in, but infiltration is computed prognostically. This infiltration is then used to set an upper boundary condition for the soil.\n\nThis is paired with Pond.PrognosticRunoff: both are used at the same  time, ensuring that the infiltration used for the boundary condition of soil is also used to compute the runoff for the surface water.\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#SoilPlantHydrologyModel","page":"ClimaLSM","title":"SoilPlantHydrologyModel","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.PrognosticSoilPressure\nClimaLSM.RootExtraction","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM.PrognosticSoilPressure","page":"ClimaLSM","title":"ClimaLSM.PrognosticSoilPressure","text":"PrognosticSoilPressure{FT} <: PlantHydraulics.AbstractRootExtraction{FT}\n\nConcrete type of PlantHydraulics.AbstractRootExtraction, used for dispatch  in an LSM with both soil and plant hydraulic components.\n\nThis is paired with the source term Soil.RootExtraction:both  are used at the same time, ensuring that the water flux into the roots is extracted correctly from the soil.\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.RootExtraction","page":"ClimaLSM","title":"ClimaLSM.RootExtraction","text":"RootExtraction{FT} <: Soil.AbstractSoilSource{FT}\n\nConcrete type of Soil.AbstractSoilSource, used for dispatch  in an LSM with both soil and plant hydraulic components.\n\nThis is paired with the source term Vegetation.PrognosticSoilPressure:both  are used at the same time, ensuring that the water flux into the roots is extracted correctly from the soil.\n\n\n\n\n\n","category":"type"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The AbstractModel tutorial describes how a user can run simulations of a physical system governed by differential equations. In this framework, the user must define a model type for their problem, which contains all of the information required to set up the system of equations. By extending the methods for make_rhs(model), prognostic_variables(model), etc, the information stored in the model is used to make the system of equations. Given initial conditions, these equations can then be stepped forward in time using the time-stepper of your choice (we are set up to use OrdinaryDiffEq.jl currently).","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The benefit of this framework is that it can be used for both individual components of an LSM (soil, snow, rivers, canopy biophysics, carbon...) as well as the LSM itself. Here we explain how a simple single column two component model can be set up using this software interface. Additionally, we demonstrate here the use of the auxiliary or cache variables, which were mentioned but not needed in the Henon-Heiles problem solved in the prior tutorial.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We'll first demonstrate how to set up two components in standalone mode, before spending time explaining the LSM setup. In our example, we have a component which accounts for soil hydrology via the Richardson-Richards (RR) equation.  Our second component is a surface water model without lateral flow (standing water, as in a pond). For more details on these models, and how they were set up, please feel free to look at the source code here and here. This tutorial focuses on using the AbstractModels framework to set up the equations, rather than on running simulations.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"First, let's load the required modules:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"if !(\".\" in LOAD_PATH)\n    push!(LOAD_PATH, \".\")\nend\nusing ClimaLSM\nusing ClimaLSM.Domains: LSMSingleColumnDomain, Column\nusing ClimaLSM.Soil\nusing ClimaLSM.Pond\n\nFT = Float64;","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#The-individual-component-models-I-Soil-Hydrology","page":"Intro to multi-component models","title":"The individual component models I - Soil Hydrology","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The RR equation for the volumetric water content of soil is given by","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"fracpartial ϑpartial t = -  (-K(ψ+z)) + S(xyz t)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"In order to solve this, one must specify:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"boundary conditions,\nrelevant parameters (closure models for K and ψ),\na domain and a spatial discretization scheme,\nadditional source terms S, if applicable,\na time-stepping algorithm,\ninitial conditions.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We make the distinction between the spatially discretized equations (for which you need parameters, boundary conditions, source terms, and domain/ discretization scheme information in order to write down and evaluate), and the simulation you want to run (for which you need the equations, initial conditions, a time span, and a time-stepping scheme in order to specify completely).","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, we'll focus on what you need to write the equations. In the design of all CliMA systems, everything you need to write the equations is stored in the model structure itself, so that we can call make_ode_function(model) and get back a function which computes the time derivative of the prognostic variables, which the ODE timestepper needs to advance the state forward in time.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"For the RR equation, we can create this as follows. First, we specify parameters:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ν = FT(0.495);\nK_sat = FT(0.0443 / 3600 / 100); # m/s\nS_s = FT(1e-3); #inverse meters\nvg_n = FT(2.0);\nvg_α = FT(2.6); # inverse meters\nvg_m = FT(1) - FT(1) / vg_n;\nθ_r = FT(0);\nsoil_ps = Soil.RichardsParameters{FT}(ν, vg_α, vg_n, vg_m, K_sat, S_s, θ_r);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Next, let's define the spatial domain and discretization:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"zmax = FT(0);\nzmin = FT(-1);\nnelems = 20;\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"And boundary conditions and source terms (none currently):","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"top_flux_bc = FluxBC((p, t) -> eltype(t)(0.0))\nbot_flux_bc = FluxBC((p, t) -> eltype(t)(0.0))\nsources = ()\nboundary_fluxes = (; water = (top = top_flux_bc, bottom = bot_flux_bc))","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(water = (top = ClimaLSM.Soil.FluxBC(Main.var\"##315\".var\"#1#2\"()), bottom = ClimaLSM.Soil.FluxBC(Main.var\"##315\".var\"#3#4\"())),)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"With this information, we can make our model:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"soil = Soil.RichardsModel{FT}(;\n    parameters = soil_ps,\n    domain = soil_domain,\n    boundary_conditions = boundary_fluxes,\n    sources = sources,\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We also can create the soil prognostic and auxiliary ClimaCore.Field.FieldVectors using the default method for initialize,","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Y_soil, p_soil, coords_soil = initialize(soil);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and we can set up the ode function using the default as well,","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"soil_ode! = make_ode_function(soil);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"which computes, for the column domain,","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"-frac z (-Kfrac(ψ+z) z)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"for each value of ϑ on the mesh of our soil_domain.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Note that the soil model does include both hydraulic K and pressure head ψ in the auxiliary vector, so the fields p_soil.soil.K and p_soil.soil.ψ are present. These are automatically updated first in each call to soil_ode!, as follows:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function soil_ode!(dY, Y, p, t)\n         update_aux!(p,Y,t)\n         rhs!(dY, Y, p, t)\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"where update_aux! updates K, and ψ, in p, in place, and rhs! computes the divergence of the Darcy flux, using the updated p, and then updates dY in place with the computed values. For this reason, the p vector does not need to be set to some initial condition consistent with Y_soil.soil.ϑ(t=0) before starting a simulation, though initial conditions must be given for Y.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Note also that we have defined methods make_rhs and make_update_aux, which only take the model as argument, and which return the functions update_aux! and rhs!, here and here.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Lastly, the coordinates returned by initialize contain the z-coordinates of the centers of the finite difference layers used for spatial discretization of the PDE.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#The-individual-component-models-II-Surface-Water","page":"Intro to multi-component models","title":"The individual component models II - Surface Water","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The pond model has a single variable, the pond height η, which satisfies the ODE:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"frac η t = -(P - I) = R","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"where P is the precipitation, I the infiltration into the soil, and R is the runoff. Note that P, I < 0 indicates flow in the -ẑ direction.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"To write down the pond equations, we need to specify","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"P\nI","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"which are akin to boundary conditions. In standalone mode,  one would need to pass in prescribed functions of time and store them inside our pond model, since again, the pond model structure must contain everything needed to make the ode function:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"precipitation(t::T) where {T} = t < T(20) ? -T(1e-5) : T(0.0) # m/s\n\ninfiltration(t::T) where {T} = -T(1e-6) #m/s\npond_model = Pond.PondModel{FT}(;\n    runoff = PrescribedRunoff{FT}(precipitation, infiltration),\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, PrescribedRunoff is the structure holding the prescribed driving functions for P and I.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Again we can initialize the state vector and auxiliary vectors:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Y_pond, p_pond, coords_pond = initialize(pond_model);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We can make the ode function in the same way, for stepping the state forward in time:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"pond_ode! = make_ode_function(pond_model);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The pond_ode! function works in the same way as for the soil model:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function pond_ode!(dY, Y, p, t)\n         update_aux!(p,Y,t)\n         rhs!(dY, Y, p, t)\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"but the update_aux! does not alter p at all in this case. The pond model does not have auxiliary variables, so p_pond is empty.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The coordinates here are relatively meaningless - we are solving for the pond height at a point in space on the surface of the Earth, and by default this assigns a Point domain, with a coordinate of z_sfc = 0. In a simulation with horizontal resolution, the coordinates returned would be the (x,y,z=z_sfc(x,y)) coordinates of the surface, which are more useful.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#An-LSM-with-pond-and-soil:","page":"Intro to multi-component models","title":"An LSM with pond and soil:","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The LSM model must contain everything needed to write down the joint system of equations","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"fracpartial etapartial t = -(P(t) - I(ϑ η P)) = R","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"fracpartial ϑpartial t = -  (-K(ψ+z)) + S","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"-K (ψ+z)_z = zmax   z = I(ϑ η P)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"-K (ψ+z)_z = zmin   z = 00","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"These two components interact via the infiltration term I. Infiltration is a boundary condition for the soil, and affects the source term for the surface water equation. Infiltration depends on precipitation, the soil moisture state, and the pond height.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"As in the standalone cases, defining our model requires specifying","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"parameters,\ndomains, discretizations\nprecipitation,\nboundary conditions,\nsources in the soil equation, if any.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"First, let's make our LSM domain, which now contains information about the subsurface domain and the surface domain. For a single column, this means specifying the boundaries of the soil domain and the number of elements.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"lsm_domain = LSMSingleColumnDomain(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The surface domain is again just a Point with z_sfc = zmax.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"lsm_domain.surface","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaLSM.Domains.Point{Float64, ClimaCore.Spaces.PointSpace{ClimaCore.DataLayouts.DataF{ClimaCore.Geometry.LocalGeometry{(3,), ClimaCore.Geometry.ZPoint{Float64}, Float64, StaticArraysCore.SMatrix{1, 1, Float64, 1}}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}}(0.0, ClimaCore.Spaces.PointSpace{ClimaCore.DataLayouts.DataF{ClimaCore.Geometry.LocalGeometry{(3,), ClimaCore.Geometry.ZPoint{Float64}, Float64, StaticArraysCore.SMatrix{1, 1, Float64, 1}}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}(ClimaCore.DataLayouts.DataF{ClimaCore.Geometry.LocalGeometry{(3,), ClimaCore.Geometry.ZPoint{Float64}, Float64, StaticArraysCore.SMatrix{1, 1, Float64, 1}}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}\n  [0.0, 0.05, 0.025, 20.0, 0.05, 20.0, 400.0]))","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The subsurface domain is a column from zmin to zmax:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"lsm_domain.subsurface","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaLSM.Domains.Column{Float64, ClimaCore.Spaces.FiniteDifferenceSpace{ClimaCore.Spaces.CellCenter, ClimaCore.Topologies.IntervalTopology{ClimaCore.Meshes.IntervalMesh{ClimaCore.Domains.IntervalDomain{ClimaCore.Geometry.ZPoint{Float64}, Tuple{Symbol, Symbol}}, LinRange{ClimaCore.Geometry.ZPoint{Float64}, Int64}}, NamedTuple{(:bottom, :top), Tuple{Int64, Int64}}}, ClimaCore.Geometry.CartesianGlobalGeometry, ClimaCore.DataLayouts.VF{ClimaCore.Geometry.LocalGeometry{(3,), ClimaCore.Geometry.ZPoint{Float64}, Float64, StaticArraysCore.SMatrix{1, 1, Float64, 1}}, Matrix{Float64}}}}((-1.0, 0.0), (20,), (:bottom, :top), CenterFiniteDifferenceSpace:\n  IntervalTopology on 20-element IntervalMesh of IntervalDomain(ZPoint(-1.0), ZPoint(0.0); boundary_names = (:bottom, :top)))","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Let's now collect the needed arguments for the soil and pond models:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"soil_args = (parameters = soil_ps, domain = lsm_domain.subsurface, sources = ());\nsurface_water_args = (domain = lsm_domain.surface,);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Atmospheric drivers don't \"belong\" to either component alone:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"land_args = (precip = precipitation,);\nland = LandHydrology{FT}(;\n    land_args = land_args,\n    soil_model_type = Soil.RichardsModel{FT},\n    soil_args = soil_args,\n    surface_water_model_type = Pond.PondModel{FT},\n    surface_water_args = surface_water_args,\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, LandHydrology is a type of AbstractModel which has a surface water model (Pond or otherwise) and a soil model (RR, or perhaps otherwise). Note that we pass in the type of the soil and surface water model - these could be more complex, e.g. a river model with lateral flow could be used in place of the Pond. We could also add in a snow component.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Now, note that we did not specify the infiltration function, like we did in standalone pond mode, nor did we specify boundary conditions for the soil model. Yet, before we stressed that the model needs to have everything required to write down and evaluate the time derivative of the ODEs. So, how does this work?","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, the LSM model constructor is given the information needed to make both the soil model and the pond model. Then, it is like running the pond and soil model in standalone mode, in series, except we have defined methods internally for computing the boundary condition and pond source term correctly, based on I, instead of using prescribed values passed in. The LSM constructor creates the correct boundary_fluxes object for the soil model, and the correct infiltration object for the pond model under the hood.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"To advance the state of the joint system (ϑ, η) from time t to time t+Δt, we must compute the infiltration at t. This value is stored in p.soil_infiltration, and reflects a proper use of the auxiliary or cache state: storing a quantity which we would rather compute once and store, rather than compute twice, once in the soil ode function, and once in the pond ode function. This guarantees the same value is used for both equations. In pseudo code, we have:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function make_update_aux(land)\n         soil_update_aux! = make_update_aux(land.soil)\n         surface_update_aux! = make_update_aux(land.surface_water)\n         interactions_update_aux! = make_update_aux(land, land.soil, land.surface_water)\n         function update_aux!(p,Y,t)\n                  surface_update_aux!(p,Y,t) # does nothing to `p`\n                  soil_update_aux!(p,Y,t) # updates p.soil.K and p.soil.ψ\n                  interactions_update_aux!(p,Y,t) # updates p.soil_infiltration\n         end\n         return update_aux!\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and similarily for the rhs! functions:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function make_rhs(land)\n         soil_rhs! = make_update_aux(land.soil)\n         surface_rhs! = make_update_aux(land.surface_water)\n         function rhs!(dY,Y,p,t)\n                  surface_rhs(dY,Y,p, t), # computes dY.surface.η\n                  soil_rhs!(dY,Y,p,t) # computes dY.soil.ϑ\n         end\n         return rhs!\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The ode_function! for the land model is then again just","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function ode_function!(dY, Y, p, t)\n         update_aux!(p,Y,t)\n         rhs!(dY, Y, p, t)\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"In the above, we showed explicitly what occurs by hardcoding the rhs!, update_aux! with names for soil and surface_water. In reality, this is done by looping over the components of the land model, meaning that we can use the same code internally for land models with different components.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"A similar composition occurs for initializing the state itself: Calling initialize(land) does four things:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"initialize(land.soil)\ninitialize(land.surface_water)\ninitializes interaction terms, like p.soil_infiltration\nappend these into Y, p, and coords:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Y, p, coords = initialize(land);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We have volumetric liquid water fraction:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(Y.soil)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:ϑ_l,)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and surface height of the pond:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(Y.surface_water)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:η,)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"as well as auxiliary variables for the soil:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(p.soil)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:K, :ψ)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and nothing for surface water:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(p.surface_water)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"()","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and the shared interaction term","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(p)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:soil_infiltration, :soil, :surface_water)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and finally, coordinates - useful for visualization of solutions:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"coords.subsurface","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaCore.Geometry.ZPoint{Float64}-valued Field:\n  z: [-0.975, -0.925, -0.875, -0.825, -0.775, -0.725, -0.675, -0.625, -0.575, -0.525, -0.475, -0.425, -0.375, -0.325, -0.275, -0.225, -0.175, -0.125, -0.075, -0.025]","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and the coordinates of the surface variables:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"coords.surface","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaCore.Geometry.ZPoint{Float64}-valued Field:\n  z: [0.0]","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"And we can make the ode function as before:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"land_ode! = make_ode_function(land);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Next up would be to set initial conditions, choose a timestepping scheme, and run your simulation.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#Advantages-and-disadvantages","page":"Intro to multi-component models","title":"Advantages and disadvantages","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Some advantages to our interface design are as follows:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"a developer only needs to learn a few concepts (rhs!, prognostic vs. aux variables, update_aux!, initialize, domains) to make a model which can be run in standalone or work with other components.\nlikewise, a user only needs to learn one interface to run all models, regardless of if they are standalone components or LSMs with multiple componnents.\nthe ode_function!is completely seperate from the timestepping scheme used, so any scheme can be used (with the exception of mixed implicit/explicit schemes, which we can't handle yet).\nalthough we wrote it here in a hardwired fashion for surface water and soil, the update_aux!, rhs!, etc. many methods for LSM models generalize to any number and mix of components. One just needs to write a new model type (e.g. BiophysicsModel <: AbstractModel for a vegetation and carbon component model) and the appropriate interaction methods for that model.\nthe order in which the components are treated in the rhs or in update aux does not matter. What matters is that auxiliary/cache variables are updated first, and within this update, interactions are updated last. We assume that the rhs! function for a component only needs the entire p and Y.component in making this statement. Similarily, updating the aux variables of a single component does not require interaction variables. Yhis is also the same as saying they can be run in standalone mode.\nthe code is also modular in terms of swapping out a simple component model for a more complex version.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Possible disadvantages to our interface design:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Even in standalone model, variables are accessed in a nested way: Y.soil, p.soil, etc, which is excessive.\nTo accomodate the fact that some components involve PDEs, a developer for purely ODE based component does need to at least handle ClimaCore.Field.FieldVectors.\nstandalone models need to play by the rules of AbstractModels, and LSMs need to play by the rules of ClimaLSM.jl.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/SoilBiogeochemistry/#Soil-Biogeochemistry","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"CurrentModule = ClimaLSM.Soil.Biogeochemistry","category":"page"},{"location":"APIs/SoilBiogeochemistry/#Model-Structure","page":"Soil Biogeochemistry","title":"Model Structure","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.SoilCO2Model","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2Model","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2Model","text":"SoilCO2Model\n\nA model for simulating the production and transport of CO₂ in the soil with dynamic source and diffusion terms.\n\nparameters: the parameter set\ndomain: the soil domain, using ClimaCore.Domains\nboundary_conditions: the boundary conditions, of type AbstractBoundaryConditions\nsources: A tuple of sources, each of type AbstractSource\ndriver:  Drivers\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#Parameter-Structure","page":"Soil Biogeochemistry","title":"Parameter Structure","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.SoilCO2ModelParameters","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2ModelParameters","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2ModelParameters","text":"SoilCO2ModelParameters{FT <: AbstractFloat, PSE}\n\nA struct for storing parameters of the SoilCO2Model.\n\nP_sfc: Pressure at the surface of the soil (Pa)\nD_liq: Diffusivity of soil C substrate in liquid (unitless)\nν: Soil porosity (m³ m⁻³)\nθ_a100: Air-filled porosity at soil water potential of -100 cm H₂O (~ 10 Pa)\nD_ref: Diffusion coefficient for CO₂ in air at standard temperature and pressure (m² s⁻¹)\nb: Absolute value of the slope of the line relating log(ψ) versus log(θ) (unitless)\nα_sx: Pre-exponential factor (kg C m-3 s-1)\nEa_sx: Activation energy (J mol-1)\nkM_sx: Michaelis constant (kg C m-3)\nkM_o2: Michaelis constant for O2 (m3 m-3)\nO2_a: Volumetric fraction of O₂ in the soil air, dimensionless\nD_oa: Diffusion coefficient of oxygen in air, dimensionless\np_sx: Fraction of soil carbon that is considered soluble, dimensionless\nearth_param_set: Physical constants used Clima-wide\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#Model-specific-Types","page":"Soil Biogeochemistry","title":"Model-specific Types","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.MicrobeProduction\nClimaLSM.Soil.Biogeochemistry.SoilCO2FluxBC\nClimaLSM.Soil.Biogeochemistry.SoilCO2StateBC\nClimaLSM.Soil.Biogeochemistry.AbstractSoilDriver\nClimaLSM.Soil.Biogeochemistry.PrescribedSoil","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.MicrobeProduction","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.MicrobeProduction","text":"MicrobeProduction{FT} <: AbstractCarbonSource{FT}\n\nStruct for the microbe production of CO2, appearing as a source term in the differential equation.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2FluxBC","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2FluxBC","text":"SoilCO2FluxBC <: AbstractSoilCO2BC\n\nA container holding the CO2 flux boundary condition, which is a function f(p,t), where p is the auxiliary state vector.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2StateBC","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2StateBC","text":"SoilCO2StateBC <: AbstractSoilCO2BC\n\nA container holding the CO2 state boundary condition (kg CO2 m−3), which is a function f(p,t), where p is the auxiliary state vector. \n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.AbstractSoilDriver","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.AbstractSoilDriver","text":"AbstractSoilDriver\n\nAn abstract type for drivers of soil CO2 production. These are soil temperature, soil moisture, root carbon, soil organic matter and microbe carbon. All varying in space (horizontally and vertically) and time.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.PrescribedSoil","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.PrescribedSoil","text":"PrescribedSoil <: AbstractSoilDriver\n\nA container which holds the prescribed functions for soil temperature and moisture. \n\nThis is meant for use when running the biogeochemistry model in standalone mode, without a prognostic soil model.\n\ntemperature: The temperature of the soil, of the form f(z::FT,t::FT) where {FT <: AbstractFloat}\nvolumetric_liquid_fraction: Soil moisture, of the form f(z::FT,t::FT) where {FT <: AbstractFloat}\nsoil_organic_carbon: Carbon content of soil organic matter, of the form f(z::FT,t::FT) where {FT <: AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#Functions-of-State","page":"Soil Biogeochemistry","title":"Functions of State","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.volumetric_air_content\nClimaLSM.Soil.Biogeochemistry.co2_diffusivity\nClimaLSM.Soil.Biogeochemistry.microbe_source","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.volumetric_air_content","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.volumetric_air_content","text":"volumetric_air_content(θ_w::FT,\n                       params::SoilCO2ModelParameters{FT}\n                       ) where {FT}\n\nComputes the volumetric air content (θ_a) in the soil,  which is related to the total soil porosity (ν) and  volumetric soil water content (θ_w = θ_l+θ_i).\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.co2_diffusivity","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.co2_diffusivity","text":"co2_diffusivity(\n                T_soil::FT,\n                θ_w::FT,\n                params::SoilCO2ModelParameters{FT}\n                ) where {FT}\n\nComputes the diffusivity of CO₂ within the soil (D).\n\nFirst, D0 is computed using the temperature within the soil (T_soil in K) and  pressure at the surface of the soil (P_sfc in Pa), using reference values of T_ref and P_ref (273 K and 101325 Pa). Here, θ_a is the  volumetric air content and θ_a100 is the volumetric air content  at a soil water potential of  100cm, and b is the pore size distribution of the soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.microbe_source","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.microbe_source","text":"microbe_source(T_soil::FT,\n               θ_l::FT,\n               Csom::FT,\n               params::SoilCO2ModelParameters{FT}\n               ) where {FT}\n\nComputes the CO₂ production in the soil by microbes, in depth and time (kg C / m^3/s), using the Dual Arrhenius Michaelis Menten model (Davidson et al., 2012).\n\n\n\n\n\n","category":"function"},{"location":"Contributing/#Contributing","page":"Contribution guide","title":"Contributing","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"Thank you for contributing to ClimaLSM! We encourage Pull Requests (PRs). Please do not hesitate to ask questions.","category":"page"},{"location":"Contributing/#Some-useful-tips","page":"Contribution guide","title":"Some useful tips","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"When you start working on a new feature branch, make sure you start from main by running: git checkout main.\nMake sure you add tests for your code in test/ and appropriate documentation in the code and/or in docs/. All exported functions and structs must be documented.\nWhen your PR is ready for review, clean up your commit history by squashing and make sure your code is current with ClimateMachine main by rebasing.","category":"page"},{"location":"Contributing/#Continuous-integration","page":"Contribution guide","title":"Continuous integration","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"After rebasing your branch, you can ask for review. Fill out the template and provide a clear summary of what your PR does. When a PR is created or updated, a set of automated tests are run on the PR in our continuous integration (CI) system.","category":"page"},{"location":"Contributing/#Automated-testing","page":"Contribution guide","title":"Automated testing","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"Currently a number of checks are run per commit for a given PR.","category":"page"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"JuliaFormatter checks if the PR is formatted with .dev/climaformat.jl.\nDocumentation rebuilds the documentation for the PR and checks if the docs are consistent and generate valid output.\nTests runs the file test/runtests.jl,  using Pkg.test(). These are a mix of unit tests and fast integration tests.","category":"page"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"We use bors to manage merging PR's in the the ClimaLSM repo. If you're a collaborator and have the necessary permissions, you can type bors try in a comment on a PR to have integration test suite run on that PR, or bors r+ to try and merge the code.  Bors ensures that all integration tests for a given PR always pass before merging into main.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Usage/domain_tutorial/#Domain-Tutorial","page":"Intro to ClimaLSM Domains","title":"Domain Tutorial","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/#Goals-of-the-tutorial","page":"Intro to ClimaLSM Domains","title":"Goals of the tutorial","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"The goal of this is to outline what is currently implemented in ClimaLSM and to serve as a software design document for future development involving the underlying domains.","category":"page"},{"location":"generated/Usage/domain_tutorial/#Background","page":"Intro to ClimaLSM Domains","title":"Background","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"In both the atmosphere and the ocean, all variables are defined at all locations in the region of interest, or domain.  For example, the air density, temperature, pressure, and wind speed are defined everywhere in the domain. After choosing a resolution and discretizing space, the numerical problem is to advance a system of differential equations, where at each coordinate point a value of ρ, T, P, and u⃗ are solved for at each step. The choice of domain is a question \"only\" of geometry: you may be interested in a large eddy simulation (using a box domain), or in a global model (where you would need a spherical shell domain representing the atmosphere or ocean from some depth to a given height).","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"For land surface models, each variable is not defined everywhere in space. For example, the soil water content θ is only defined below ground. Snow water equivalent (S) is only defined on the surface itself. Canopy variables are only defined above ground. Once we have discretized the land surface region into a set of points, the numerical problem is to advance a system of ODEs, where at each coordinate point a different subset of (θ, S, ...) are solved for.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"In other words, different prognostic variables in land surface models exist in different, overlapping, domains. We need to decide on the geometry of interest (e.g. single column vs a global simulation), but we also need to specify where each variable of the model is defined.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"ClimaLSM Domains were designed with this in mind. Following other Clima models, the domains are defined so that","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"the user can easily switch geometries, e.g. single column to global model,\nindividual component models can be run by themselves, using a single domain,\ndifferent model component domains can be combined into a single land model domain, since different land model components can be combined to run as a single land surface model.","category":"page"},{"location":"generated/Usage/domain_tutorial/#What-is-a-ClimaLSM-Domain?","page":"Intro to ClimaLSM Domains","title":"What is a ClimaLSM Domain?","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"A domain represents a region of space. In ClimaLSM, domains are simply structs containing parameters that define these regions - for example an x-range and y-range that define a plane. In addition, ClimaLSM domains store the ClimaCore function space on the physical domain. When solving partial differential equations, the spatial discretization is tied to a set of basis functions you wish to use to represent the prognostic variable as a function of space. The nodal points - the locations in space where the variable is solved for - are arranged in space in a manner which depends on these basis functions.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Note that this is only needed for domains of variables satisfying PDEs, but it is defined for all domains[1].","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"There is a single key method which take a ClimaLSM domain as an argument.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"coordinates(domain): under the hood, this function  uses","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"the function space (domain.space) to create the coordinate field. This returns the coordinates as a ClimaCore.Fields.Field object. Depending on the domain, the returned coordinate field will have elements of different names and types. For example, the SphericalShell domain has coordinates of latitude, longitude, and height, while a Plane domain has coordinates of x and y, and a Point domain only has a coordinate z_sfc.","category":"page"},{"location":"generated/Usage/domain_tutorial/#Domain-types","page":"Intro to ClimaLSM Domains","title":"Domain types","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"All ClimaLSM domains are subtypes of abstract type ClimaLSM.Domains.AbstractDomain. A variety of concrete domain types are supported:","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"0D: Domains.Point\n1D: Domains.Column\n2D: Domains.Plane, Domains.SphericalSurface\n3D: Domains.HybridBox, Domains.SphericalShell.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Single component models (soil, snow, vegetation, canopy airspace...) will be solved on a single domain. Which domain is appropriate depends on the model equations (PDE vs ODE) and on the configuration of interest (single column or 3d).","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Furthermore, these individual model domains are composed when building a multi-component Land System Model. In this case, the full LSM domain is split into regions: the subsurface and the surface[2]. Different land model components are associated with these different regions - e.g. the soil model is a subsurface model, while vegetation is a surface model. The above domain types are then paired based on the desired LSM domain being modeled:","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"LSM Domain Surface Domain Subsurface Domain\nLSMSingleColumnDomain Point Column\nLSMCartesianBoxDomain Plane[3] HybridBox\nLSMSphericalShellDomain SphericalSurface[3] SphericalShell","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"It is important to note that the horizontal domain used for the surface and subsurface domains are identical in LSM simulations. This ensures that we can use the same indexing of surface and subsurface domains and variables to correctly compute and apply boundary fluxes between different component models. Otherwise we would need to develop additional infrastructure in order to, for example, select the correct subsurface column corresponding to a particular surface location.","category":"page"},{"location":"generated/Usage/domain_tutorial/#How-variable-initialization-depends-on-domains","page":"Intro to ClimaLSM Domains","title":"How variable initialization depends on domains","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"When a developer creates a model, they need to specify the symbols used for the prognostic variables, via prognostic_vars, and the types of those variables,  via prognostic_types.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"The initialize function (which calls both initialize_prognostic  and initialize_auxiliary) creates the prognostic state vector Y (a ClimaCore.Fields.FieldVector). Each field (ClimaCore.Fields.Field) stored within the field vector corresponds to a prognostic variable (identified with the symbol specified). If the prognostic type for that variable is a float, the field will be a field of float values (a scalar field)[4].","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"How do domains tie into this? The field of prognostic variables corresponds in a 1-1 fashion with the coordinate field created from the domain. That is, if you coordinate field has points (x,y) in [(1,1), (1,2); (2,1), (2,2)], your prognostic variable field (for variable θ, for example) will be [θ11, θ12; θ21, θ22]. Your variable always has the same spatial resolution as the domain does.","category":"page"},{"location":"generated/Usage/domain_tutorial/#Future-work","page":"Intro to ClimaLSM Domains","title":"Future work","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Almost all interactions between variables in land surface models are within column - that is, there is only vertical transport and exchanges. The exception to this is the horizontal flow of water on the surface and within the soil. The right hand side (rhs) functions (the ODE functions) can be split into \"vertical\" and \"horizontal\" pieces. We envision each step of the land surface model simulation to be solved in two steps: (1) the vertical rhs evaluations are carried out (and can be parallelized), and (2) the horizontal rhs functions are then evaluated (possibly less frequently?) and require communcation between columns. In this case, right hand side functions will need to be aware of the domain.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[1]: finite differencing is used in the vertical, and spectral elements are used in the horizontal.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[2]: a suprasurface region may also be necessary - for example if the canopy airspace model involves PDEs.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[3]: We are not sure yet if the surface domain should be associated with a 2d space or if it should be a 3d space but with only one point in the vertical. Both would result in the same number of surface coordinate points, but they would have different underlying representations. The latter may be helpful because we can use the column function in the exact same way to extract the same column from the surface and subsurface domains.  In that case, the surface domain would be a HybdridBox (with one vertical element) instead of a Plane, and a SphericalShell (with one vertical element) instead of a Spherical Surface. Regardless, the two domains will share the same instance of the horizontal domain.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[4]: We also will support having an array-like type of variable (perhaps an NTuple; this is TBD).  This is to be used for the multi-layer canopy model.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/Regridder/#Bucket","page":"Parameter Dataset Tools","title":"Bucket","text":"","category":"section"},{"location":"APIs/Regridder/","page":"Parameter Dataset Tools","title":"Parameter Dataset Tools","text":"CurrentModule = ClimaLSM.Regridder","category":"page"},{"location":"APIs/Regridder/#Types","page":"Parameter Dataset Tools","title":"Types","text":"","category":"section"},{"location":"APIs/Regridder/","page":"Parameter Dataset Tools","title":"Parameter Dataset Tools","text":"ClimaLSM.Regridder.MapInfo","category":"page"},{"location":"APIs/Regridder/#Functions","page":"Parameter Dataset Tools","title":"Functions","text":"","category":"section"},{"location":"APIs/Regridder/","page":"Parameter Dataset Tools","title":"Parameter Dataset Tools","text":"ClimaLSM.Regridder.regrid_netcdf_to_field","category":"page"},{"location":"APIs/SurfaceWater/#SurfaceWater","page":"Surface Water Models","title":"SurfaceWater","text":"","category":"section"},{"location":"APIs/SurfaceWater/","page":"Surface Water Models","title":"Surface Water Models","text":"CurrentModule = ClimaLSM.Pond","category":"page"},{"location":"APIs/SurfaceWater/#Models","page":"Surface Water Models","title":"Models","text":"","category":"section"},{"location":"APIs/SurfaceWater/","page":"Surface Water Models","title":"Surface Water Models","text":"ClimaLSM.Pond.PondModel","category":"page"},{"location":"APIs/SurfaceWater/#ClimaLSM.Pond.PondModel","page":"Surface Water Models","title":"ClimaLSM.Pond.PondModel","text":"PondModel{FT, D, R} <: AbstractSurfaceWaterModel{FT}\n\nA stand-in model for models like the snow or river model. In  standalone mode, a prescribed soil infiltration rate  and precipitation rate control the rate of change of the pond height variable η via an ODE. In integrated LSM mode, the infiltration into the soil will be computed via a different method, and also be applied as a flux boundary condition for the soil model. \n\ndomain: The domain for the pond model\nrunoff: The runoff model for the pond model\n\n\n\n\n\n","category":"type"},{"location":"APIs/SurfaceWater/#Methods-and-Types","page":"Surface Water Models","title":"Methods and Types","text":"","category":"section"},{"location":"APIs/SurfaceWater/","page":"Surface Water Models","title":"Surface Water Models","text":"ClimaLSM.Pond.PrescribedRunoff\nClimaLSM.Pond.surface_runoff","category":"page"},{"location":"APIs/SurfaceWater/#ClimaLSM.Pond.PrescribedRunoff","page":"Surface Water Models","title":"ClimaLSM.Pond.PrescribedRunoff","text":"PrescribedRunoff <:  AbstractSurfaceRunoff\n\nThe required input for driving the simple pond model: precipitation, as a function of time, soil effective saturation at a depth Δz below the surface, as a function of time, and soil parameters, which affect infiltration.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SurfaceWater/#ClimaLSM.Pond.surface_runoff","page":"Surface Water Models","title":"ClimaLSM.Pond.surface_runoff","text":"function Pond.surface_runoff(\n    runoff::PrognosticRunoff{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::ClimaCore.Fields.FieldVector,\n    t::FT,\n) where {FT}\n\nExtension of the Pond.surface_runoff function, which computes the surface runoff, for use in an LSM when the runoff is determined prognostically.\n\n\n\n\n\n","category":"function"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Soil/richards_equation/#Hydrostatic-Equilibrium-test-for-Richards-Equation","page":"Richards Equation","title":"Hydrostatic Equilibrium test for Richards Equation","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"This tutorial shows how to use ClimaLSM code to solve Richards equation in a column of soil. We choose boundary conditions of zero flux at the top and bottom of the column, and then run the simulation long enough to see that the system is approaching hydrostatic equilibrium, where the gradient of the pressure head is equal and opposite the gradient of the gravitational head.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"The equations are:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"frac  ϑ_l t =   K (ϑ_l ν ) h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Here","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"t is the time (s),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"z is the location in the vertical (m),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"K is the hydraulic conductivity (m/s),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"h is the hydraulic head (m),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"ϑ_l is the augmented volumetric liquid water fraction,","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"ν  denotes parameters relating to soil type, such as porosity.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We will solve this equation in a 1-d domain with z  -50, and with the following boundary and initial conditions:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"- K h(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"-K h(t z = -5) = 0 ẑ","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"ϑ(t = 0 z) = ν-0001","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"θ_i(t = 0 z) = 00","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"where nu is the porosity.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"When solving Richards equation (not a fully integrated energy and hydrology model), the hydraulic conductivity is only a function of liquid moisture content.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Lastly, our formulation of this equation allows for a continuous solution in both saturated and unsaturated areas, following Woodward and Dawson (2000).","category":"page"},{"location":"generated/Soil/richards_equation/#Preliminary-setup","page":"Richards Equation","title":"Preliminary setup","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Load external packages","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"using OrdinaryDiffEq: ODEProblem, solve, RK4\nusing Plots","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Load CLIMAParameters and ClimaLSM modules","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"using ClimaCore\nimport CLIMAParameters as CP\n\nif !(\".\" in LOAD_PATH)\n    push!(LOAD_PATH, \".\")\nend\nusing ClimaLSM\nusing ClimaLSM.Domains: Column\nusing ClimaLSM.Soil\n\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Define the float type desired (Float64 or Float32), and get the parameter set, which holds constants used across CliMA models:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"const FT = Float64;\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Soil/richards_equation/#Set-up-the-soil-model","page":"Richards Equation","title":"Set up the soil model","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We want to solve Richards equation alone, without simultaneously solving the heat equation. Because of that, we choose a RichardsModel. Taking a look at the documentation (linked), we see that we need to supply parameters, a domain, boundary conditions, and sources.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"First, we define the parameters: porosity \\nu, Ksat, the van Genuchten parameters vg_α, vg_m, vg_n, θ_r, and the specific storage value for the soil. Note that all values must be given in mks units.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Ksat = FT(0.0443 / (3600 * 100))\nS_s = FT(1e-3)\nν = FT(0.495)\nvg_α = FT(2.6)\nvg_n = FT(2)\nvg_m = 1 - 1 / vg_n\nθ_r = FT(0)\nparams = Soil.RichardsParameters{FT}(ν, vg_α, vg_n, vg_m, Ksat, S_s, θ_r);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Next, we define the domain. Here, we are considering a 1D domain, discretized using finite difference, with coordinates z:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"zmax = FT(0)\nzmin = FT(-5)\nnelems = 10\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We also need to specify the boundary conditions. The user can specify two conditions, either at the top or at the bottom, and they can either be either on the state ϑ_l or on the flux  -K∇h. Flux boundary conditions are passed as the (scalar) z-component of the flux f, i.e. F⃗ = f ẑ. In either case, the user must pass a function of the auxiliary variables p and time t:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"surface_flux = Soil.FluxBC((p, t) -> eltype(t)(0.0))\nbottom_flux = Soil.FluxBC((p, t) -> eltype(t)(0.0))\nboundary_conditions = (; water = (top = surface_flux, bottom = bottom_flux));","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Lastly, in this case we don't have any sources, so we pass an empty tuple:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"sources = ();","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Now we can make the model itself. This contains every piece of information needed to turn the continuous form of Richards equation into a set of ODEs, ready to be passed off to a timestepper.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"soil = Soil.RichardsModel{FT}(;\n    parameters = params,\n    domain = soil_domain,\n    boundary_conditions = boundary_conditions,\n    sources = sources,\n);\nsoil_ode! = make_ode_function(soil);","category":"page"},{"location":"generated/Soil/richards_equation/#Set-up-the-simulation","page":"Richards Equation","title":"Set up the simulation","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We can now initialize the prognostic and auxiliary variable vectors, and take a peek at what those variables are:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Y, p, coords = initialize(soil);\nY.soil |> propertynames\n\np.soil |> propertynames\n\ncoords |> propertynames","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"(:z,)","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Note that the variables are nested into Y and p in a hierarchical way. Since we have the vectors (composed of ClimaCore Fields handy, we can now set them to the desired initial conditions.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Y.soil.ϑ_l .= FT(0.494);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Next, we turn to timestepping. We choose the initial and final times, as well as a timestep.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"t0 = FT(0)\ntimeend = FT(60 * 60 * 24 * 36)\ndt = FT(100);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"And then we can solve the system of equations, using OrdinaryDiffEq.jl:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"prob = ODEProblem(soil_ode!, Y, (t0, timeend), p)\nsol = solve(prob, RK4(); dt = dt, adaptive = false);","category":"page"},{"location":"generated/Soil/richards_equation/#Create-some-plots","page":"Richards Equation","title":"Create some plots","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We'll plot the moisture content vs depth in the soil, as well as the expected profile of ϑ_l in hydrostatic equilibrium. For ϑ_l values above porosity, the soil is saturated, and the pressure head changes from being equal to the matric potential to the pressure generated by compression of water and the soil matrix. The profile can be solved for analytically by (1) solving for the form that ϑ_l(z) must take in both the saturated and unsaturated zones to satisfy the steady-state requirement with zero flux boundary conditions, (2) requiring that at the interface between saturated and unsaturated zones, the water content equals porosity, and (3) solving for the location of the interface by requiring that the integrated water content at the end matches that at the beginning (yielding an interface location of z≈-0.56m).","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"t = sol.t ./ (60 * 60 * 24);\nϑ_l = [parent(sol.u[k].soil.ϑ_l) for k in 1:length(t)]\nz = parent(coords.z)\nplot(\n    ϑ_l[1],\n    z,\n    label = string(\"t = \", string(t[1]), \"days\"),\n    xlim = [0.47, 0.501],\n    ylabel = \"z\",\n    xlabel = \"ϑ_l\",\n    legend = :bottomleft,\n    title = \"Equilibrium test\",\n);\nplot!(ϑ_l[end], z, label = string(\"t = \", string(t[end]), \"days\"));\nfunction hydrostatic_equilibrium(z, z_interface)\n    ν = 0.495\n    S_s = 1e-3\n    α = 2.6\n    n = 2.0\n    m = 0.5\n    if z < z_interface\n        return -S_s * (z - z_interface) + ν\n    else\n        return ν * (1 + (α * (z - z_interface))^n)^(-m)\n    end\nend\nplot!(hydrostatic_equilibrium.(z, -0.56), z, label = \"equilibrium solution\");\n\nplot!(1e-3 .+ ϑ_l[1], z, label = \"porosity\");","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Save the output:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"savefig(\"equilibrium_test_ϑ_l.png\");","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"(Image: )","category":"page"},{"location":"generated/Soil/richards_equation/#References","page":"Richards Equation","title":"References","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Woodward and Dawson, (2000) SIAM J. Numer. Anal., 37, 701–724","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The AbstractModel framework allows users to define land component models (e.g. for snow, soil, vegetation, carbon...) which can be run in standalone mode, or as part of a land surface model with many components. In order to achieve this flexibility, we require a standard interface, which is what AbstractModels provides. The interface is designed to work with an external package for the time-stepping of ODEs - we are using DifferentialEquations.jl at present - , with ClimaCore.jl, for the spatial discretization of PDEs, and with ClimaLSM.jl, for designing and running multi-component land surface models. For a developer of a new land model component, using AbstractModels as shown below is the first step towards building a model which can be run in standalone or with ClimaLSM.jl.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"This tutorial introduces some of the functionality of the AbstractModel interface functions and types. We demonstrate how to use a Model <: AbstractModel structure to define a set of equations, and explain a few core methods which must be defined for your Model type in order to run a simulation.  We use a non-land modelling system of ODEs for this purpose, to demonstrate generality. For land model components, you would follow the same principles - see the carbon tutorial for a similar example.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Future tutorials (TBD where) will show to define simple land component models and run them together using ClimaLSM.jl.","category":"page"},{"location":"generated/Usage/model_tutorial/#General-setup","page":"Using AbstractModel functionality","title":"General setup","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"We assume you are solving a system of the form of a set of PDEs or ODEs. Additional algebraic equations for can be accomodated as well, but only in addition to variables advanced using differential equations.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Spatially discretized PDEs reduce to a system of ODEs, so we can assume an ODE system in what follows without a loss of generality. When using AbstractModels, you should use ClimaCore to discretize your PDE, as applicable.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Your model defines a system of equations of the following form:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"fracd vecYd t = vecf(vecY vecx t mboxparams ldots)","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The variables that are stepped forward via a differential equation are referred to as prognostic variables, and are stored in vecY. Generically, we will speak of the functions vecf as the right hand side functions; these can be functions of the prognostic state, of space vecx, and of time t, as well as of other parameters. Note that quantities such as boundary conditions, source terms, etc, will appear within these right hand side functions.","category":"page"},{"location":"generated/Usage/model_tutorial/#Optional-auxiliary-variables","page":"Using AbstractModel functionality","title":"Optional auxiliary variables","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"It may be that there are quantities, which depend on the state vector vecY, location, time, and other parameters, which are expensive to compute (e.g. requiring solving an implicit equation) and also needed multiple times in the right hand side functions.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Denoting these variables as vecp, your equations may be rewritten as:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"fracd vecYd t = vecf(vecY vecp vecx t mboxparams ldots)","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"vecp(vecx t) = vecg(vecY(t) vecx t mboxparams ldots)","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The variables vecp at the current timestep are functions of the state, space, time, and parameters. These variables are referred to as auxiliary variables (TBD: or cache variables). Their only purpose is for storing the value of a quantity in a pre-allocated spot in memory, to avoid computing something expensive many times per time-step, or to avoid allocating memory to store each timestep. They are not a required feature, strictly speaking, and should be only used for this particular use case. A model purely consisting of algebraic equations, running in standalone mode, is not supported (vecY cannot be zero dimensional).","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"In order to define this set of equations, in a manner which is consistent with the AbstractModel interface (used by ClimaLSM.jl) and time-stepping algorithms (OrdinaryDiffEq.jl for the present), the following must be provided.","category":"page"},{"location":"generated/Usage/model_tutorial/#The-Model","page":"Using AbstractModel functionality","title":"The Model","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"All ClimaLSM component models are concrete instances of AbstractModels. The reason for grouping them in such a way is because they all have shared required functionality, as we will see, and can make use of common default behavior.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The model structure holds all of the information needed to create the full right hand side function, including parameters (which can be functions of space and time), boundary conditions, and physical equations.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The purpose of our AbstractModel interface is that it allows you to run land component models in standalone mode and in an LSM mode without a change in interface. However, we can still use this system to show how to set up a model, equations, etc.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"As a simple demonstration of use, we'll build a model now which describes the motion of a particle in the Henon-Heiles potential. This decribes a particle moving on a plane under a cubic potential energy function, and is a problem of historical and scientific interest as an example of a system exhibiting Hamiltonian chaos. To be clear, if you only want to integrate a system like this, you should not be using our AbstractModels interface, and working with OrdinaryDiffEq.jl directly!","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Let's first import some needed packages.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"using OrdinaryDiffEq: ODEProblem, solve, RK4\nusing SciMLBase\nusing Plots\nusing ClimaCore\nif !(\".\" in LOAD_PATH)\n    push!(LOAD_PATH, \".\")\nend\nusing ClimaLSM\nusing ClimaLSM.Domains","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Import the functions we are extending for our model:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"import ClimaLSM: name, make_rhs, prognostic_vars, prognostic_types\nimport ClimaLSM.Domains: coordinates","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"There is only one free parameter in the model, λ, so our model structure is very simple. Remember, the model should contain everything you need to create the right hand side function.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"struct HenonHeiles{FT} <: AbstractModel{FT}\n    λ::FT\nend;","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"For reasons we will discuss momentarily, let's also define the name of the model:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"ClimaLSM.name(model::HenonHeiles) = :hh;","category":"page"},{"location":"generated/Usage/model_tutorial/#Right-hand-side-function","page":"Using AbstractModel functionality","title":"Right hand side function","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Here is where we need to specify the equations of motion. The prognostic variables for the Henon-Heiles system consist of two position variables (x, y), and two momentum variables (m_x, m_y, where we are using m rather than p as is typical to avoid confusion with the auxiliary vector p). The differential equations are:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"dotx = m_x","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"doty = m_y","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"dotm_x = -x -2 λ xy","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"dotm_y = -y - λ (x² - y²)","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"These equations describe Newton's 2nd law for the particle, where the force acting is minus the gradient of the potential function (the aforementioned cubic); they are derived by taking the appropriate derivatives of the Hamiltonian (in this case, total energy) function.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"We now create the function which makes the rhs! function:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"function ClimaLSM.make_rhs(model::HenonHeiles{FT}) where {FT}\n    function rhs!(dY, Y, p, t)\n        dY.hh.x[1] = Y.hh.m[1]\n        dY.hh.x[2] = Y.hh.m[2]\n        dY.hh.m[1] = -Y.hh.x[1] - FT(2) * model.λ * Y.hh.x[1] * Y.hh.x[2]\n        dY.hh.m[2] = -Y.hh.x[2] - model.λ * (Y.hh.x[1]^FT(2) - Y.hh.x[2]^FT(2))\n    end\n    return rhs!\nend;","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"A couple of notes: the vector vecdY contains the evaluation of the right hand side function for each variable in vecY. It is updated in place (so no extra allocations are needed). Note that both vectors are not simple arrays. They are ClimaCore FieldVectors, which allow us to impose some organizational structure on the state while still behaving like arrays in some ways. We use the symbol returned by name(model) to create this hierarchy. There will ever only be one level to the hierarchy.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The arguments of rhs! are determined by the OrdinaryDiffEq interface, but should be fairly generic for any time-stepping algorithm. The rhs! function is only created once. If there are time-varying forcing terms appearing, for example, the forcing functions must be stored in model and passed in that way.","category":"page"},{"location":"generated/Usage/model_tutorial/#The-state-vectors-\\vec{Y}-and-\\vec{p}","page":"Using AbstractModel functionality","title":"The state vectors vecY and vecp","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"We have given the state vector vecY a particular structure, and don't expect the user to build this themselves. In order to have the structure Y (and p) correctly created, the model developer needs to define the names of the prognostic and auxiliary variables:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"ClimaLSM.prognostic_vars(::HenonHeiles) = (:x, :m);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"There are no auxiliary variables. By not defining a method for them, we are using the default (which adds no variables to p), i.e. ClimaLSM.auxiliary_vars(::HenonHeiles) = ().","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Lastly, we need to tell the interface something about the variables. What are they? Arrays? ClimaCore Fields? We have made the assumption that all variables are tied to a domain, or a set of coordinates.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"In this case, our coordinates are 2-d. Hence our coordinates are given by a vector with 2 elements. For each coordinate, both m and x are scalars with type FT:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"ClimaLSM.Domains.coordinates(model::HenonHeiles{FT}) where {FT} =\n    FT.([0.0, 0.0]);\nClimaLSM.prognostic_types(::HenonHeiles{FT}) where {FT} = (FT, FT);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"OK, let's try running a simulation now. Create a model instance, with λ = 1:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"hh = HenonHeiles{Float64}(1.0);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Create the initial state structure, using the default method:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Y, p, _ = initialize(hh);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Note that Y has the structure we planned on in our rhs! function, for x,","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Y.hh.x","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"2-element Vector{Float64}:\n 0.0\n 0.0","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"and for m","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Y.hh.m","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"2-element Vector{Float64}:\n 0.0\n 0.0","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Note also that p is empty:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"p.hh","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Float64[]","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Here we now update Y in place with initial conditions of our choosing.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Y.hh.x[1] = 0.0;\nY.hh.x[2] = 0.0;\nY.hh.m[1] = 0.5;\nY.hh.m[2] = 0.0;","category":"page"},{"location":"generated/Usage/model_tutorial/#Running-the-simulation","page":"Using AbstractModel functionality","title":"Running the simulation","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Create the ode_function. In our case, since we don't have any auxiliary variables to update each timestep, this is equivalent to the rhs! function, but in other models, it might involve an update_aux! step as well.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"ode_function! = make_ode_function(hh);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"From here on out, we are just using OrdinaryDiffEq.jl functions to integrate the system forward in time.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Initial and end times, timestep:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"t0 = 0.0;\ntf = 600.0;\ndt = 1.0;","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"ODE.jl problem statement:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"prob = ODEProblem(ode_function!, Y, (t0, tf), p);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Solve command - we are using a fourth order Runge-Kutta timestepping scheme. ODE.jl uses adaptive timestepping, but we can still pass in a suggested timestep dt.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"sol = solve(prob, RK4(); dt = dt, reltol = 1e-6, abstol = 1e-6);","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Get the solution back, and make a plot.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"x = [sol.u[k].hh.x[1] for k in 1:1:length(sol.t)]\ny = [sol.u[k].hh.x[2] for k in 1:1:length(sol.t)]\n\nplot(x, y, xlabel = \"x\", ylabel = \"y\", label = \"\");\nsavefig(\"orbits.png\");","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"(Image: )","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"And, yes, we could be using a symplectic integrator, but that would require us to use a slightly different interface - and that isn't needed for our Clima LSM application.","category":"page"},{"location":"generated/Usage/model_tutorial/#And-now-for-some-bonus-material","page":"Using AbstractModel functionality","title":"And now for some bonus material","text":"","category":"section"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The motion of the system takes place in four dimensions, but it's hard for us to visualize. One nice way of doing so is via a Poincare section, or surface of section. The idea is that for quasiperiodic motion, which Hamiltonian dynamics result in, the orbit will repeatedly meet certain criteria, and we can look at the orbit variables when that criterion is met.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"For example, we can define our surface of section to be x = 0 dotx  0, since x is varying periodically and repeatedly passes through zero in the positive direction. We also will only look at orbits with a particular energy value, E_0.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Every time the section criterion is met, we plot (y m_y). Points on this surface provide a complete description of the orbit, because we can, with knowledge of x = 0 m_x 0 and E_0, back out the state of the system, which uniquely defines the orbit we are looking at.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"The functions below creates these initial conditions, given a value for E, λ, and y (setting m_y = 0 arbitrarily):","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"function set_ic_via_y!(Y, E, λ, y; my = 0.0, x = 0.0)\n    twiceV = λ * (x^2 + y^2 + 2 * x^2 * y - 2 / 3 * y^3)\n    mx = sqrt(2.0 * E - my^2 - twiceV)\n    Y.hh.x[1] = x\n    Y.hh.x[2] = y\n    Y.hh.m[1] = mx\n    Y.hh.m[2] = my\nend;","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"This function creates similar initial conditions, but via m_y :","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"function set_ic_via_my!(Y, E, λ, my; y = 0.0, x = 0.0)\n    twiceV = λ * (x^2 + y^2 + 2 * x^2 * y - 2 / 3 * y^3)\n    mx = sqrt(2.0 * E - my^2 - twiceV)\n    Y.hh.x[1] = x\n    Y.hh.x[2] = y\n    Y.hh.m[1] = mx\n    Y.hh.m[2] = my\nend;","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"This function takes initial conditions, runs an integration, and saves the values of the state on the surface of section, and then plots those points (thanks to the SciML team for creating a tutorial showing how to extract the state of the system when the section criterion is met.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"function map(Y, pl)\n    t0 = 0.0\n    tf = 4800.0\n    dt = 1.0\n    condition(u, t, integrator) = u.hh.x[1]\n    affect!(integrator) = nothing\n    cb = ContinuousCallback(\n        condition,\n        affect!,\n        nothing,\n        save_positions = (true, false),\n    )\n    prob = ODEProblem(ode_function!, Y, (t0, tf), p)\n    sol = solve(\n        prob,\n        RK4();\n        dt = dt,\n        reltol = 1e-6,\n        abstol = 1e-6,\n        callback = cb,\n        save_everystep = false,\n        save_start = false,\n        save_end = false,\n    )\n    y_section = [sol.u[k].hh.x[2] for k in 1:1:length(sol.t)]\n    my_section = [sol.u[k].hh.m[2] for k in 1:1:length(sol.t)]\n\n    scatter!(pl, y_section, my_section, label = \"\", markersize = 3, msw = 0)\nend;","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"Ok! Let's try it out:","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"E = 0.125;\nyvals = -0.35:0.05:0.35;\npl = scatter();\nfor yval in yvals\n    set_ic_via_y!(Y, E, 1.0, yval)\n    map(Y, pl)\nend;\nmyvals = [-0.42, -0.27, 0.05, 0.27, 0.42];\nfor myval in myvals\n    set_ic_via_my!(Y, E, 1.0, myval)\n    map(Y, pl)\nend;\n\nplot(pl, xlabel = \"y\", ylabel = \"m_y\");\nsavefig(\"surface.png\");","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"(Image: )","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"On a plot like this, a single orbit (indicated via point color) can be identified roughly as regular, or periodic, if it the points lie on a curve. Orbits which are chaotic fill out an area (orbits with a lot of numerical error also do...). The coexistence of these orbits arbitrarily close to each other, in the same system, is one fascinating aspect of deterministic chaos. Another fun aspect is seeing periodic orbits of different resonances. The set of cocentric curves are near a first-order resonance, meaning that every period for x (to reach zero), we see about one period in y,my space. The teal circles around them indicate a near resonant orbit of order 4.","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"","category":"page"},{"location":"generated/Usage/model_tutorial/","page":"Using AbstractModel functionality","title":"Using AbstractModel functionality","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Coupled-heat-and-water-equations-tending-towards-equilibrium","page":"Energy and Hydrology","title":"Coupled heat and water equations tending towards equilibrium","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The Richards equation tutorial demonstrates how to solve for water flow in soil, without considering heat transfer, phase changes, or the effect of temperature and the effect of ice on the hydraulic properties of the soil.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Here we show how to solve the interacting heat and water equations, in sand, but without phase changes. This allows us to capture behavior that is not present in Richards equation alone.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The equations are:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"frac ρe_int t =    κ(θ_l θ_i ν ) T +   ρe_int_liq K (Tθ_l θ_i ν ) nabla h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"frac  ϑ_l t =   K (Tθ_l θ_i ν ) h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Here","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"t is the time (s),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"z is the location in the vertical (m),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρe_int is the volumetric internal energy of the soil (J/m^3),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"T is the temperature of the soil (K),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"κ is the thermal conductivity (W/m/K),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρe_int_liq is the volumetric internal energy of liquid water (J/m^3),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"K is the hydraulic conductivity (m/s),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"h is the hydraulic head (m),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ϑ_l is the augmented volumetric liquid water fraction,","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"θ_i is the volumetric ice fraction, and","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ν  denotes parameters relating to soil type, such as porosity.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We will solve this equation in an effectively 1-d domain with z  -10, and with the following boundary and initial conditions:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"- κ T(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"-κ T(t z = -1) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"T(t = 0 z) = T_min + (T_max-T_min) e^Cz","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"- K h(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"-K h(t z = -1) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ϑ(t = 0 z) = ϑ_min + (ϑ_max-ϑ_min) e^Cz","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"where C T_min T_max ϑ_min and ϑ_max are constants.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"If we evolve this system for times long compared to the dynamical timescales of the system, we expect it to reach an equilibrium where the LHS of these equations tends to zero. Assuming zero fluxes at the boundaries, the resulting equilibrium state should satisfy hz = 0 and Tz = 0. Physically, this means that the water settles into a vertical profile in which the resulting pressure balances gravity and that the temperature is constant across the domain.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We verify that the system is approaching this equilibrium, and we also sketch out an analytic calculation for the final temperature in equilibrium.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Import-necessary-modules","page":"Energy and Hydrology","title":"Import necessary modules","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"External (non - CliMA) modules","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"using OrdinaryDiffEq: ODEProblem, solve, RK4\nusing DiffEqCallbacks\nusing Statistics\nusing Plots","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ClimaLSM and CLIMAParameters modules","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"using ClimaCore\nimport CLIMAParameters as CP\nusing ClimaLSM\nusing ClimaLSM.Domains: Column\nusing ClimaLSM.Soil\n\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Choose a floating point precision, and get the parameter set, which holds constants used across CliMA models:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"FT = Float64\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Create-the-model","page":"Energy and Hydrology","title":"Create the model","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Set the values of other parameters required by the model:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ν = FT(0.395);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Soil solids are the components of soil besides water, ice, gases, and air. We specify the soil component fractions, relative to all soil solids. These do not sum to unity; the remainder is νssminerals (=0.08, in this case).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ν_ss_quartz = FT(0.92)\nν_ss_om = FT(0.0)\nν_ss_gravel = FT(0.0);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Other parameters include the hydraulic conductivity at saturation, the specific storage, and the van Genuchten parameters for sand. We recommend Chapter 8 of Bonan (2019) for finding parameters for other soil types.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Ksat = FT(4.42 / 3600 / 100) # m/s\nS_s = FT(1e-3) #inverse meters\nvg_n = FT(1.89)\nvg_α = FT(7.5) # inverse meters\nθ_r = FT(0.0);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Other constants needed:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"κ_quartz = FT(7.7) # W/m/K\nκ_minerals = FT(2.5) # W/m/K\nκ_om = FT(0.25) # W/m/K\nκ_liq = FT(0.57) # W/m/K\nκ_ice = FT(2.29) # W/m/K\nκ_air = FT(0.025); #W/m/K","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The particle density of organic material-free soil is equal to the particle density of quartz and other minerals (Balland and Arp (2005)).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρp = FT(2700); # kg/m^3","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We calculate the thermal conductivities for the solid material and for saturated soil. These functions are taken from (Balland and Arp (2005)).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"κ_solid = Soil.κ_solid(ν_ss_om, ν_ss_quartz, κ_om, κ_quartz, κ_minerals)\nκ_dry = Soil.κ_dry(ρp, ν, κ_solid, κ_air)\nκ_sat_frozen = Soil.κ_sat_frozen(κ_solid, ν, κ_ice)\nκ_sat_unfrozen = Soil.κ_sat_unfrozen(κ_solid, ν, κ_liq);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Next, we calculate the volumetric heat capacity of dry soil. Dry soil refers to soil that has no water content.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρc_ds = FT((1 - ν) * 1.926e06); # J/m^3/K\nparams = Soil.EnergyHydrologyParameters(;\n    κ_dry = κ_dry,\n    κ_sat_frozen = κ_sat_frozen,\n    κ_sat_unfrozen = κ_sat_unfrozen,\n    ρc_ds = ρc_ds,\n    ν = ν,\n    ν_ss_om = ν_ss_om,\n    ν_ss_quartz = ν_ss_quartz,\n    ν_ss_gravel = ν_ss_gravel,\n    vg_α = vg_α,\n    vg_n = vg_n,\n    K_sat = Ksat,\n    S_s = S_s,\n    θ_r = θ_r,\n    earth_param_set = earth_param_set,\n);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We also need to pick a domain on which to solve the equations:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"zmax = FT(0)\nzmin = FT(-1.0)\nnelems = 50\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The boundary value problem in this case requires a boundary condition at the top and the bottom of the domain for each equation being solved. These conditions can be on the state (ϑ_l or T), or on the fluxes (-K∇h or -κ∇T). In the case of fluxes, we return the magnitude of the flux, assumed to point along ẑ. And, in each case, the boundary conditions are supplied in the form of a function of auxiliary variables p and time t.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Water boundary conditions:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"surface_water_flux = FluxBC((p, t) -> eltype(t)(0.0))\nbottom_water_flux = FluxBC((p, t) -> eltype(t)(0.0));","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The boundary conditions for the heat equation:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"surface_heat_flux = FluxBC((p, t) -> eltype(t)(0.0))\nbottom_heat_flux = FluxBC((p, t) -> eltype(t)(0.0));","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We wrap up all of those in a NamedTuple:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"boundary_fluxes = (;\n    water = (top = surface_water_flux, bottom = bottom_water_flux),\n    heat = (top = surface_heat_flux, bottom = bottom_heat_flux),\n);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We aren't using any sources or sinks in the equations here, but this is where freeze/thaw terms, runoff, root extraction, etc. would go.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"sources = ();","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Lastly, we can create the EnergyHydrology model. As always, the model encodes and stores all of the information (parameters, continous equations, prognostic variables, etc) which are needed to turn the PDE system into a set of ODEs, properly spatially discretized for the domain of interest.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"soil = Soil.EnergyHydrology{FT}(;\n    parameters = params,\n    domain = soil_domain,\n    boundary_conditions = boundary_fluxes,\n    sources = sources,\n);\n\nsoil_ode! = make_ode_function(soil);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Set-up-the-simulation","page":"Energy and Hydrology","title":"Set up the simulation","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We can now initialize the prognostic and auxiliary variable vectors, and take a peek at what those variables are:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Y, p, coords = initialize(soil);\nY.soil |> propertynames\n\np.soil |> propertynames\n\ncoords |> propertynames","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"(:z,)","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Note that the variables are nested into Y and p in a hierarchical way. Since we have the vectors handy, we can now set them to the desired initial conditions.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"function init_soil!(Y, z, params)\n    ν = params.ν\n    FT = eltype(Y.soil.ϑ_l)\n    zmax = FT(0)\n    zmin = FT(-1)\n\n    theta_max = FT(ν * 0.5)\n    theta_min = FT(ν * 0.4)\n    T_max = FT(289.0)\n    T_min = FT(288.0)\n\n    c = FT(20.0)\n    @. Y.soil.ϑ_l =\n        theta_min +\n        (theta_max - theta_min) * exp(-(z - zmax) / (zmin - zmax) * c)\n    Y.soil.θ_i .= FT(0.0)\n\n    T = @.(T_min + (T_max - T_min) * exp(-(z - zmax) / (zmin - zmax) * c))\n\n    θ_l = Soil.volumetric_liquid_fraction.(Y.soil.ϑ_l, ν)\n    ρc_s = Soil.volumetric_heat_capacity.(θ_l, Y.soil.θ_i, Ref(params))\n    Y.soil.ρe_int .=\n        Soil.volumetric_internal_energy.(Y.soil.θ_i, ρc_s, T, Ref(params))\nend\n\ninit_soil!(Y, coords.z, soil.parameters);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Updating the auxiliary to the initial state is not necessary, because the first step of the ode_function is to update the auxiliary state. However, we want to plot the initial state in this tutorial, so we update it here.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"update_aux! = make_update_aux(soil)\nupdate_aux!(p, Y, FT(0.0));\n\nt0 = FT(0)\ntimeend = FT(60 * 60 * 72)\ndt = FT(30.0);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We use OrdinaryDiffEq.jl for carrying out the time integration. By default, it only returns Y and t at each time we request output (saveat, below). We use a callback in order to also get the auxiliary vector p back:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"saved_values = SavedValues(FT, ClimaCore.Fields.FieldVector)\ncb = SavingCallback(\n    (u, t, integrator) -> copy(integrator.p),\n    saved_values;\n    saveat = 0:43200:timeend,\n)\nprob = ODEProblem(soil_ode!, Y, (t0, timeend), p);\nsol = solve(prob, RK4(); dt = dt, saveat = 0:43200:timeend, callback = cb);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Extract output","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"z = parent(coords.z)\nt = parent(sol.t)\nϑ_l = [parent(sol.u[k].soil.ϑ_l) for k in 1:length(t)]\nT = [parent(saved_values.saveval[k].soil.T) for k in 1:length(t)];","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Let's look at the initial and final times:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"plot(ϑ_l[1], z, xlabel = \"ϑ_l\", ylabel = \"z (m)\", label = \"t = 0d\")\nplot!(ϑ_l[4], z, label = \"t = 1.5d\")\nplot!(ϑ_l[end], z, label = \"t = 3d\")\nsavefig(\"eq_moisture_plot.png\");","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"(Image: )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"plot(T[1], z, xlabel = \"T (K)\", ylabel = \"z (m)\", label = \"t = 0d\")\nplot!(T[4], z, xlabel = \"T (K)\", ylabel = \"z (m)\", label = \"t = 1.5d\")\nplot!(T[end], z, xlabel = \"T (K)\", ylabel = \"z (m)\", label = \"t = 3d\")\nsavefig(\"eq_temperature_plot.png\");","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"(Image: )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Analytic-Expectations","page":"Energy and Hydrology","title":"Analytic Expectations","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We can determine a priori what we expect the final temperature to be in equilibrium.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Regardless of the final water profile in equilibrium, we know that the final temperature T_f will be a constant across the domain. All water that began with a temperature above this point will cool to T_f, and water that began with a temperature below this point will warm to T_f. The initial function T(z) is equal to T_f at a value of z = z̃. This is the location in space which divides these two groups (water that warms over time and water that cools over time) spatially. We can solve for z̃(T_f) using T_f = T(z̃).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Next, we can determine the change in energy required to cool the water above z̃ to T_f: it is the integral from z̃ to the surface at z = 0 of c θ(z) T(z), where c is the volumetric heat capacity - a constant here - and θ(z) is the initial water profile. Compute the energy required to warm the water below z̃ to T_f in a similar way, set equal, and solve for T_f. This results in T_f = 288.056, which is very close to the mean T we observe after 3 days, of 288.054.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"One could also solve the equation for ϑ_l specified by  h z = 0 to determine the functional form of the equilibrium profile of the liquid water.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#References","page":"Energy and Hydrology","title":"References","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Bonan, G.  Climate change and terrestrial ecosystem modeling. Cambridge University Press, 2019.\nBalland and Arp, J. Environ. Eng. Sci. 4: 549–558 (2005)","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/SharedUtilities/#Shared-Utilities","page":"Shared Utilities","title":"Shared Utilities","text":"","category":"section"},{"location":"APIs/SharedUtilities/","page":"Shared Utilities","title":"Shared Utilities","text":"CurrentModule = ClimaLSM","category":"page"},{"location":"APIs/SharedUtilities/#Domains","page":"Shared Utilities","title":"Domains","text":"","category":"section"},{"location":"APIs/SharedUtilities/","page":"Shared Utilities","title":"Shared Utilities","text":"ClimaLSM.Domains.AbstractDomain\nClimaLSM.Domains.AbstractLSMDomain\nClimaLSM.Domains.PlantHydraulicsDomain\nClimaLSM.Domains.AbstractVegetationDomain\nClimaLSM.Domains.SphericalShell\nClimaLSM.Domains.SphericalSurface\nClimaLSM.Domains.HybridBox\nClimaLSM.Domains.Column\nClimaLSM.Domains.Plane\nClimaLSM.Domains.Point\nClimaLSM.Domains.LSMSingleColumnDomain\nClimaLSM.Domains.LSMMultiColumnDomain\nClimaLSM.Domains.LSMSphericalShellDomain\nClimaLSM.Domains.coordinates\nClimaLSM.Domains.obtain_face_space\nClimaLSM.Domains.obtain_surface_space","category":"page"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.AbstractDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.AbstractDomain","text":"AbstractDomain{FT <:AbstractFloat}\n\nAn abstract type for domains.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.AbstractLSMDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.AbstractLSMDomain","text":"AbstractLSMDomain{FT} <: AbstractDomain{FT}\n\nAn abstract type for LSMDomains, which have two components: a surface and a subsurface.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.PlantHydraulicsDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.PlantHydraulicsDomain","text":"PlantHydraulicsDomain{FT} <: AbstractVegetationDomain{FT}\n\nDomain for a single bulk plant with roots of varying depths. The user needs to specify the depths of the root tips as wel as the heights of the compartments to be modeled within the plant. The compartment heights are expected to be sorted in ascending order. The number of stem and leaf compartments the plant should be divided into must be specified as well.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.AbstractVegetationDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.AbstractVegetationDomain","text":"AbstractVegetationDomain{FT} <: AbstractDomain{FT}\n\nTBD if this needed longer term.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.SphericalShell","page":"Shared Utilities","title":"ClimaLSM.Domains.SphericalShell","text":"struct SphericalShell{FT} <: AbstractDomain{FT}\n    radius::FT\n    height::FT\n    nelements::Tuple{Int, Int}\n    npolynomial::Int\nend\n\nA struct holding the necessary information to construct a domain, a mesh,  a 2d spectral element space (non-radial directions)  x a 1d finite difference space (radial direction),  and the resulting coordinate field.\n\nFields\n\nradius: The radius of the shell\nheight: The radial extent of the shell\nnelements: The number of elements to be used in the non-radial and radial directions\nnpolynomial: The polynomial order to be used in the non-radial directions\nspace: The associated ClimaCore Space\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.SphericalSurface","page":"Shared Utilities","title":"ClimaLSM.Domains.SphericalSurface","text":"struct SphericalSurface{FT} <: AbstractDomain{FT}\n    radius::FT\n    nelements::Tuple{Int, Int}\n    npolynomial::Int\nend\n\nA struct holding the necessary information to construct a domain, a mesh,  a 2d spectral element space (non-radial directions) and the resulting coordinate field.\n\nFields\n\nradius: The radius of the surface\nnelements: The number of elements to be used in the non-radial directions\nnpolynomial: The polynomial order to be used in the non-radial directions\nspace: The associated ClimaCore Space\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.HybridBox","page":"Shared Utilities","title":"ClimaLSM.Domains.HybridBox","text":"struct HybridBox{FT} <: AbstractDomain{FT}\n    xlim::Tuple{FT, FT}\n    ylim::Tuple{FT, FT}\n    zlim::Tuple{FT, FT}\n    nelements::Tuple{Int, Int, Int}\n    npolynomial::Int\n    periodic::Tuple{Bool, Bool}\nend\n\nA struct holding the necessary information to construct a domain, a mesh,  a 2d spectral element space (horizontal) x a 1d finite difference space  (vertical), and the resulting coordinate field. This domain is not periodic along the z-axis. Note that  only periodic domains are supported in the horizontal.\n\nFields\n\nxlim: Domain interval limits along x axis, in meters\nylim: Domain interval limits along y axis, in meters\nzlim: Domain interval limits along z axis, in meters\nnelements: Number of elements to discretize interval, (nx, ny,nz)\nnpolynomial:  Polynomial order for the horizontal directions\nperiodic: Flag indicating periodic boundaries in horizontal. only true is supported\nspace: The associated ClimaCore Space\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.Column","page":"Shared Utilities","title":"ClimaLSM.Domains.Column","text":"Column{FT} <: AbstractDomain{FT}\n\nA struct holding the necessary information  to construct a domain, a mesh, a center and face space, etc. for use when a finite difference in 1D is suitable, as for a soil column model.\n\nFields\n\nzlim: Domain interval limits, (zmin, zmax), in meters\nnelements: Number of elements used to discretize the interval\nboundary_tags: Boundary face identifiers\nspace: The associated ClimaCore Space\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.Plane","page":"Shared Utilities","title":"ClimaLSM.Domains.Plane","text":"Plane{FT} <: AbstractDomain{FT}\n\nA struct holding the necessary information  to construct a domain, a mesh, a 2d spectral element space, and the resulting coordinate field. Note that only periodic domains are currently supported.\n\nFields\n\nxlim: Domain interval limits along x axis, in meters\nylim: Domain interval limits along y axis, in meters\nnelements: Number of elements to discretize interval, (nx, ny)\nperiodic: Flags for periodic boundaries; only true is supported\nnpolynomial: Polynomial order for both x and y\nspace: The associated ClimaCore Space\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.Point","page":"Shared Utilities","title":"ClimaLSM.Domains.Point","text":"Point{FT} <: AbstractDomain{FT}\n\nA domain for single column surface variables. For models such as ponds, snow, plant hydraulics, etc. Enables consistency  in variable initialization across all domains.\n\nFields\n\nz_sfc: Surface elevation relative to a reference (m)\nspace: The associated ClimaCore Space\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.LSMSingleColumnDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.LSMSingleColumnDomain","text":"LSMSingleColumnDomain{FT} <: AbstractLSMDomain{FT}\n\nA mixed domain, consisting of a column domain with z-coordinates at the finite difference cell centers, and a point domain, with a single z coordinate at the top boundary of the column domain. For use in LSM modeling, where a subsurface finite difference space  (for modeling soil hydrology and energy) and a surface space are both needed.\n\nFields\n\nsubsurface: The subsurface Column domain\nsurface: The surface Point domain\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.LSMMultiColumnDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.LSMMultiColumnDomain","text":"LSMMultiColumnDomain{FT} <: AbstractLSMDomain{FT}\n\nA mixed domain, consisting of a hybdrid box domain with z-coordinates at the finite difference cell centers, and a plane domain, coinciding with the surface of the box.\n\nFor use in LSM modeling, where a subsurface finite difference space  (for modeling soil hydrology and energy) and a surface space are both needed.\n\nFields\n\nsubsurface: The subsurface box domain\nsurface: The surface plane domain\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.LSMSphericalShellDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.LSMSphericalShellDomain","text":"LSMSphericalShellDomain{FT} <: AbstractLSMDomain{FT}\n\nA mixed domain, consisting of a spherical shell domain with z-coordinates at the finite difference cell centers, and a spherical surface domain, coinciding with  the surface of the shell.\n\nFor use in LSM modeling, where a subsurface finite difference space  (for modeling soil hydrology and energy) and a surface space are both needed.\n\nFields\n\nsubsurface: The subsurface shell domain\nsurface: The surface domain\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.coordinates","page":"Shared Utilities","title":"ClimaLSM.Domains.coordinates","text":"coordinates(domain::AbstractDomain)\n\nReturns the coordinate field for the domain.\n\n\n\n\n\ncoordinates(domain::AbstractLSMDomain{FT}) where {FT}\n\nReturns the coordinates of the AbstractLSMDomain as a named tuple, with keys of subsurface and surface.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.obtain_face_space","page":"Shared Utilities","title":"ClimaLSM.Domains.obtain_face_space","text":"obtain_face_space(cs::ClimaCore.Spaces.AbstractSpace)\n\nReturns the face space, if applicable, for the center space cs.\n\n\n\n\n\nobtain_face_space(cs::ClimaCore.Spaces.CenterExtrudedFiniteDifferenceSpace)\n\nReturns the face space for the CenterExtrudedFiniteDifferenceSpace cs.\n\n\n\n\n\nobtain_face_space(cs::ClimaCore.Spaces.CenterFiniteDifferenceSpace)\n\nReturns the face space corresponding to the CenterFiniteDifferenceSpace cs.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.Domains.obtain_surface_space","page":"Shared Utilities","title":"ClimaLSM.Domains.obtain_surface_space","text":"obtain_surface_space(cs::ClimaCore.Spaces.AbstractSpace)\n\nReturns the surface space, if applicable, for the center space cs.\n\n\n\n\n\nobtain_surface_space(cs::ClimaCore.Spaces.CenterExtrudedFiniteDifferenceSpace)\n\nReturns the horizontal space for the CenterExtrudedFiniteDifferenceSpace cs.\n\n\n\n\n\nobtain_surface_space(cs::ClimaCore.Spaces.CenterFiniteDifferenceSpace)\n\nReturns the top level of the face space corresponding to the CenterFiniteDifferenceSpace cs.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#Models","page":"Shared Utilities","title":"Models","text":"","category":"section"},{"location":"APIs/SharedUtilities/","page":"Shared Utilities","title":"Shared Utilities","text":"ClimaLSM.AbstractModel\nClimaLSM.make_ode_function\nClimaLSM.make_rhs\nClimaLSM.make_update_aux\nClimaLSM.make_set_initial_aux_state\nClimaLSM.prognostic_vars\nClimaLSM.prognostic_types\nClimaLSM.auxiliary_vars\nClimaLSM.auxiliary_types\nClimaLSM.initialize_prognostic\nClimaLSM.initialize_auxiliary\nClimaLSM.initialize\nClimaLSM.name\nClimaLSM.AbstractBC\nClimaLSM.AbstractSource\nClimaLSM.source!\nClimaLSM.AbstractBoundary\nClimaLSM.TopBoundary\nClimaLSM.BottomBoundary\nClimaLSM.boundary_flux\nClimaLSM.diffusive_flux\nClimaLSM.get_Δz","category":"page"},{"location":"APIs/SharedUtilities/#ClimaLSM.AbstractModel","page":"Shared Utilities","title":"ClimaLSM.AbstractModel","text":"abstract type AbstractModel{FT <: AbstractFloat}\n\nAn abstract type for all models.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.make_ode_function","page":"Shared Utilities","title":"ClimaLSM.make_ode_function","text":"make_ode_function(model::AbstractModel)\n\nReturns an ode_function that updates auxiliary variables and updates the prognostic state.\n\node_function! should be compatible with OrdinaryDiffEq.jl solvers.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.make_rhs","page":"Shared Utilities","title":"ClimaLSM.make_rhs","text":"make_rhs(model::RichardsModel)\n\nAn extension of the function make_rhs, for the Richardson- Richards equation. \n\nThis function creates and returns a function which computes the entire right hand side of the PDE for ϑ_l, and updates dY.soil.ϑ_l in place with that value.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_rhs(model::EnergyHydrology)\n\nAn extension of the function make_rhs, for the integrated soil energy and heat equations, including phase change.\n\nThis function creates and returns a function which computes the entire right hand side of the PDE for Y.soil.ϑ_l, Y.soil.θ_i, Y.soil.ρe_int,  and updates dY.soil in place with those values.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_rhs(model::VegetationModel)\n\nA function which creates the rhs! function for the PlantHydraulicsModel. The rhs! function must comply with a rhs function of OrdinaryDiffEq.jl.\n\n\n\n\n\nmake_rhs(model::BucketModel{FT}) where {FT}\n\nCreates the rhs! function for the bucket model.\n\n\n\n\n\nmake_rhs(model::SoilCO2Model)\n\nAn extension of the function make_rhs, for the soilco2 equation. This function creates and returns a function which computes the entire right hand side of the PDE for C, and updates dY.soil.C in place with that value. This has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_rhs(model::AbstractModel)\n\nReturn a rhs! function that updates state variables.\n\nrhs! should be compatible with OrdinaryDiffEq.jl solvers.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.make_update_aux","page":"Shared Utilities","title":"ClimaLSM.make_update_aux","text":"make_update_aux(model::RichardsModel)\n\nAn extension of the function make_update_aux, for the Richardson- Richards equation. \n\nThis function creates and returns a function which updates the auxiliary variables p.soil.variable in place.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_update_aux(model::EnergyHydrology)\n\nAn extension of the function make_update_aux, for the integrated soil hydrology and energy model.\n\nThis function creates and returns a function which updates the auxiliary variables p.soil.variable in place.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_update_aux(model::BucketModel{FT}) where {FT}\n\nCreates the update_aux! function for the BucketModel.\n\n\n\n\n\nmake_update_aux(model::SoilCO2Model)\n\nAn extension of the function make_update_aux, for the soilco2 equation.  This function creates and returns a function which updates the auxiliary variables p.soil.variable in place. This has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_update_aux(model::AbstractModel)\n\nReturn an update_aux! function that updates auxiliary parameters p.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.make_set_initial_aux_state","page":"Shared Utilities","title":"ClimaLSM.make_set_initial_aux_state","text":"ClimaLSM.make_set_initial_aux_state(model::BucketModel{FT}) where{FT}\n\nReturns the setinitialaux_state! function, which updates the auxiliary state p in place with the initial values corresponding to Y(t=t0) = Y0.\n\nIn this case, we also use this method to update the initial values for the spatially varying parameter fields, read in from data files.\n\n\n\n\n\nmake_set_initial_aux_state(model::AbstractModel)\n\nReturns the setinitialaux_state! function, which updates the auxiliary state p in place with the initial values corresponding to Y(t=t0) = Y0.\n\nIn principle, this function is not needed, because in the very first evaluation of the ode_function, at t=t0, the auxiliary state is updated using the initial conditions for Y=Y0. However, without setting the initial p state prior to running the simulation,  the value of p in the saved output at t=t0 will be unset.\n\nFurthermore, specific methods of this function may be useful for models which store time indepedent spatially varying parameter fields in  the auxiliary state. In this case, update_aux! does not need to do anything, but they do need to be set with the initial (constant) values before the simulation can be carried out.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.prognostic_vars","page":"Shared Utilities","title":"ClimaLSM.prognostic_vars","text":"prognostic_vars(soil::RichardsModel)\n\nA function which returns the names of the prognostic variables of RichardsModel.\n\n\n\n\n\nprognostic_vars(soil::EnergyHydrology)\n\nA function which returns the names of the prognostic variables of EnergyHydrology.\n\n\n\n\n\nprognostic_vars(model::PlantHydraulicsModel)\n\nA function which returns the names of the prognostic  variables of the PlantHydraulicsModel.\n\n\n\n\n\nprognostic_vars(m::AbstractModel)\n\nReturns the prognostic variable symbols for the model in the form of a tuple.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.prognostic_types","page":"Shared Utilities","title":"ClimaLSM.prognostic_types","text":"prognostic_types(soil::EnergyHydrology{FT}) where {FT}\n\nA function which returns the types of the prognostic variables of EnergyHydrology.\n\n\n\n\n\nprognostic_types(m::AbstractModel{FT}) where {FT}\n\nReturns the prognostic variable types for the model in the form of a tuple.\n\nTypes provided must have zero(T::DataType) defined. Common examples  include\n\nFloat64, Float32 for scalar variables (a scalar value at each \n\ncoordinate point)\n\nSVector{k,Float64} for a mutable but statically sized array of\n\nlength k at each coordinate point.\n\nHere, the coordinate points are those returned by coordinates(model).\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.auxiliary_vars","page":"Shared Utilities","title":"ClimaLSM.auxiliary_vars","text":"auxiliary_vars(soil::RichardsModel)\n\nA function which returns the names of the auxiliary variables  of RichardsModel.\n\nNote that auxiliary variables are not needed for such a simple model. We could instead compute the conductivity and matric potential within the rhs function explicitly, rather than compute and store them in the  auxiliary vector p. We did so in this case as a demonstration.\n\n\n\n\n\nauxiliary_vars(soil::EnergyHydrology)\n\nA function which returns the names of the auxiliary variables of EnergyHydrology.\n\n\n\n\n\nauxiliary_vars(m::AbstractModel)\n\nReturns the auxiliary variable symbols for the model in the form of a tuple.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.auxiliary_types","page":"Shared Utilities","title":"ClimaLSM.auxiliary_types","text":"auxiliary_types(soil::EnergyHydrology{FT}) where {FT}\n\nA function which returns the types of the auxiliary variables of EnergyHydrology.\n\n\n\n\n\nauxiliary_types(m::AbstractModel{FT}) where {FT}\n\nReturns the auxiliary variable types for the model in the form of a tuple.\n\nTypes provided must have zero(T::DataType) defined. Common examples  include\n\nFloat64, Float32 for scalar variables (a scalar value at each \n\ncoordinate point)\n\nSVector{k,Float64} for a mutable but statically sized array of\n\nlength k at each coordinate point.\n\nNote that Arrays, MVectors are not isbits and cannot be used.\n\nHere, the coordinate points are those returned by coordinates(model).\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.initialize_prognostic","page":"Shared Utilities","title":"ClimaLSM.initialize_prognostic","text":"initialize_prognostic(model::AbstractModel, state::Union{ClimaCore.Fields.Field, Vector{FT}})\n\nReturns a FieldVector of prognostic variables for model with the required structure, with values equal to similar(state). This assumes that all  prognostic variables are defined over the entire domain, and that all prognostic variables have the same dimension and type.\n\nIf a model has no prognostic variables, the returned FieldVector contains only an empty array.\n\nAdjustments to this - for example because different prognostic variables have different dimensions - require defining a new method.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.initialize_auxiliary","page":"Shared Utilities","title":"ClimaLSM.initialize_auxiliary","text":"initialize_auxiliary(model::AbstractModel,state::Union{ClimaCore.Fields.Field, Vector{FT}})\n\nReturns a FieldVector of auxiliary variables for model with the required structure, with values equal to similar(state). This assumes that all  auxiliary variables are defined over the entire domain, and that all auxiliary variables have the same dimension and type.\n\nIf a model has no auxiliary variables, the returned FieldVector contains only an empty array.\n\nAdjustments to this - for example because different auxiliary variables have different dimensions - require defining a new method.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.initialize","page":"Shared Utilities","title":"ClimaLSM.initialize","text":"ClimaLSM.initialize(model::BucketModel{FT}) where {FT}\n\nInitializes the variables for the BucketModel.\n\nNote that the BucketModel has prognostic variables that are defined on different subsets of the domain. Because of that, we have to treat them independently. In LSM models which are combinations of standalone component models, this is not  needed, and we can use the default initialize. Here, however, we need to do some hardcoding specific to this model.\n\n\n\n\n\ninitialize(model::AbstractModel)\n\nCreates the prognostic and auxiliary states structures, but with unset  values; constructs and returns the coordinates for the model domain. We may need to consider this default more as we add diverse components and  Simulations.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.name","page":"Shared Utilities","title":"ClimaLSM.name","text":"name(model::AbstractModel)\n\nReturns a symbol of the model component name, e.g. :soil or :vegetation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.AbstractBC","page":"Shared Utilities","title":"ClimaLSM.AbstractBC","text":"AbstractBC\n\nAn abstract type for types of boundary conditions, which will include prescribed functions of space and time as Dirichlet conditions or Neumann conditions, in addition to other  convenient conditions.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.AbstractSource","page":"Shared Utilities","title":"ClimaLSM.AbstractSource","text":"AbstractSource{FT <: AbstractFloat}\n\nAn abstract type for types of source terms.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.source!","page":"Shared Utilities","title":"ClimaLSM.source!","text":" source!(dY::ClimaCore.Fields.FieldVector,\n         src::PhaseChange{FT},\n         Y::ClimaCore.Fields.FieldVector,\n         p::ClimaCore.Fields.FieldVector\n         )\n\nComputes the source terms for phase change.\n\n\n\n\n\nClimaLSM.source!(dY::ClimaCore.Fields.FieldVector,\n                      src::MicrobeProduction,\n                      Y::ClimaCore.Fields.FieldVector,\n                      p::ClimaCore.Fields.FieldVector,\n                      params)\n\nA method which extends the ClimaLSM source! function for the case of microbe production of CO2 in soil.\n\n\n\n\n\n source!(dY::ClimaCore.Fields.FieldVector,\n         src::AbstractSource,\n         Y::ClimaCore.Fields.FieldVector,\n         p::ClimaCore.Fields.FieldVector\n         )::ClimaCore.Fields.Field\n\nA stub function, which is extended by ClimaLSM.\n\n\n\n\n\nClimaLSM.source!(dY::ClimaCore.Fields.FieldVector,\n                      src::RootExtraction{FT},\n                      Y::ClimaCore.Fields.FieldVector,\n                      p::ClimaCore.Fields.FieldVector\n                      params)::ClimaCore.Fields.Field  where {FT}\n\nAn extension of the ClimaLSM.source! function,  which computes source terms for the  soil model; this method returns the water loss or gain due to roots when a plant hydraulic prognostic model is included.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.AbstractBoundary","page":"Shared Utilities","title":"ClimaLSM.AbstractBoundary","text":"AbstractBoundary{}\n\nAn abstract type to indicate which boundary we are doing calculations for. Currently, we support the top boundary (TopBoundary) and bottom boundary (BottomBoundary).\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.TopBoundary","page":"Shared Utilities","title":"ClimaLSM.TopBoundary","text":"TopBoundary{} <: AbstractBoundary{}\n\nA simple object which should be passed into a function to indicate that we are considering the top boundary of the soil.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.BottomBoundary","page":"Shared Utilities","title":"ClimaLSM.BottomBoundary","text":"BottomBoundary{} <: AbstractBoundary{}\n\nA simple object which should be passed into a function to indicate that we are considering the bottom boundary of the soil.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SharedUtilities/#ClimaLSM.boundary_flux","page":"Shared Utilities","title":"ClimaLSM.boundary_flux","text":"ClimaLSM.boundary_flux(bc::FluxBC, _, Δz, _...)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which returns the desired flux.\n\nWe add a field of zeros in order to convert the bc (float) into a field.\n\n\n\n\n\nClimaLSM.boundary_flux(rre_bc::StateBC, ::ClimaLSM.TopBoundary, Δz, p, t, params)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on θ_l at the top of the domain into a flux of liquid water.\n\n\n\n\n\nClimaLSM.boundary_flux(rre_bc::StateBC, ::ClimaLSM.BottomBoundary, Δz, p, t, params)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on θ_l at the bottom of the domain into a flux of liquid water.\n\n\n\n\n\nClimaLSM.boundary_flux(heat_bc::StateBC, ::ClimaLSM.TopBoundary, Δz, p, t)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on temperature at the top of the domain into a flux of energy.\n\n\n\n\n\nClimaLSM.boundary_flux(heat_bc::StateBC, ::ClimaLSM.BottomBoundary, Δz, p, t)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on temperature at the bottom of the domain into a flux of energy.\n\n\n\n\n\nClimaLSM.boundary_flux(bc::FreeDrainage{FT}, ::ClimaLSM.BottomBoundary, Δz, p, t)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which enforces free drainage at the bottom of the domain.\n\n\n\n\n\nClimaLSM.boundary_flux(\n    bc::SoilCO2FluxBC,\n    boundary::ClimaLSM.AbstractBoundary,\n    Δz::ClimaCore.Fields.Field,\n    Y::ClimaCore.Fields.FieldVector,\n    p::ClimaCore.Fields.FieldVector,\n    t::FT,\n)::ClimaCore.Fields.Field where {FT}\n\nA method of ClimaLSM.boundary_flux which returns the soilco2 flux (kg CO2 /m^2/s) in the case of a prescribed flux BC at either the top or bottom of the domain.\n\n\n\n\n\nClimaLSM.boundary_flux(\nbc::SoilCO2StateBC,\nboundary::ClimaLSM.TopBoundary,\nΔz::ClimaCore.Fields.Field,\nY::ClimaCore.Fields.FieldVector,\np::ClimaCore.Fields.FieldVector,\nt::FT,\n)::ClimaCore.Fields.Field where {FT}\n\nA method of ClimaLSM.boundary_flux which returns the soilco2 flux in the case of a prescribed state BC at   top of the domain.\n\n\n\n\n\nClimaLSM.boundary_flux(\n    bc::SoilCO2StateBC,\n    boundary::ClimaLSM.BottomBoundary,\n    Δz::ClimaCore.Fields.Field,\n    Y::ClimaCore.Fields.FieldVector,\n    p::ClimaCore.Fields.FieldVector,\n    t::FT,\n)::ClimaCore.Fields.Field where {FT}\n\nA method of ClimaLSM.boundary_flux which returns the soilco2 flux in the case of a prescribed state BC at  bottom of the domain.\n\n\n\n\n\nboundary_flux(bc::AbstractBC, bound_type::AbstractBoundary, Δz, _...)::ClimaCore.Fields.Field\n\nA function which returns the correct boundary flux  given     any boundary condition (BC). \n\n\n\n\n\nfunction ClimaLSM.boundary_flux(\n    bc::RunoffBC,\n    ::TopBoundary,\n    Δz::FT,\n    p::ClimaCore.Fields.FieldVector,\n    t::FT,\n    params,\n)::ClimaCore.Fields.Field where {FT}\n\nExtension of the ClimaLSM.boundary_flux function, which returns the water volume boundary flux for the soil. At the top boundary, return the soil infiltration (computed each step and stored in p.soil_infiltration).\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.diffusive_flux","page":"Shared Utilities","title":"ClimaLSM.diffusive_flux","text":"diffusive_flux(K, x_2, x_1, Δz)\n\nCalculates the diffusive flux of a quantity x (water content, temp, etc). Here, x2 = x(z + Δz) and x1 = x(z), so x_2 is at a larger z by convention.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SharedUtilities/#ClimaLSM.get_Δz","page":"Shared Utilities","title":"ClimaLSM.get_Δz","text":"get_Δz(z::ClimaCore.Fields.Field)\n\nA function to return a tuple containing the distance between the top boundary and its closest center, and the bottom boundary and its closest center,  both as Fields.\n\n\n\n\n\n","category":"function"},{"location":"#ClimaLSM.jl","page":"Home","title":"ClimaLSM.jl","text":"","category":"section"}]
}
